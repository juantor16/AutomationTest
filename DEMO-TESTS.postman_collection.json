{
	"info": {
		"name": "HUB2 Consolidated APIs copy",
		"_postman_id": "ab508262-9785-5211-c33d-f724b0675fa6",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ACI",
			"description": "",
			"item": [
				{
					"name": "ACI-Template - FRAUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>FraudScreen</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n        <Amount>10000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111111111</CardNumber>\n        <CardHolder>James Rodriguez</CardHolder>\n        <CardExpiryMonth>02</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n    <Customer>\n        <EmailAddress>james@mail.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>17111989</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n    <BillingAddress>\n        <CustomerName>James Rodriguez</CustomerName>\n        <Street1>Av. de Concha Espina, 1</Street1>\n        <City>Madrid</City>\n        <Zip>28036</Zip>\n        <State>FL</State>\n        <Country></Country>\n    </BillingAddress>\n    <ShippingAddress>\n        <CustomerName>James Rodriguez</CustomerName>\n        <Street1>Av. de Concha Espina, 1</Street1>\n        <City>Madrid</City>\n        <Zip>28036</Zip>\n        <State>FL</State>\n        <Country></Country>\n    </ShippingAddress>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ACI-1 - FRAUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>FraudScreen</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>100000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111111111</CardNumber>\n        <!--<CardNumber>4539791001730106</CardNumber>-->\n        <CardHolder>James Rodriguez</CardHolder>\n        <CardExpiryMonth>02</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n    <Customer>\n        <DeviceFingerprint>test</DeviceFingerprint>\n        <EmailAddress>testing@email.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>11114444</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ACI- 20 - FRAUD (DeviceFingerprint)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>FraudScreen</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>100000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111111111</CardNumber>\n        <!--<CardNumber>4539791001730106</CardNumber>-->\n        <CardHolder>James Rodriguez</CardHolder>\n        <CardExpiryMonth>02</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n    <Customer>\n        <DeviceFingerprint>test</DeviceFingerprint>\n        <EmailAddress>testing@email.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>11114444</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ACI-21 - 3- FRAUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>FraudScreen</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>100000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>36167719110012</CardNumber>\n        <CardHolder>James Rodriguez</CardHolder>\n        <CardExpiryMonth>12</CardExpiryMonth>\n        <CardExpiryYear>2020</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n        <!--<CardType>MASTERCARD</CardType>-->\r\n\t\n    </CardDetails>\n    <!--<Customer>-->\n    <!--\t<EmailAddress>accept@email.com</EmailAddress>-->\n    <!--\t<IPAddress>115.125.14.12</IPAddress>-->\n    <!--\t<DateofBirth>11114444</DateofBirth>-->\n    <!--\t<TelNo>5212345678901</TelNo>-->\n    <!--</Customer>-->\r\n\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": "ACI 21 It's being validated by the provider."
					},
					"response": []
				},
				{
					"name": "ACI-21 - 5- FRAUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);",
									"",
									"var randomTransactionIdentifier = Math.floor(Math.random()*900000)",
									"",
									"postman.setEnvironmentVariable('TransactionIdentifier',randomTransactionIdentifier);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>FraudScreen</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{TransactionIdentifier}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>100000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4751290000000000</CardNumber>\n        <CardHolder>James Roddriguez</CardHolder>\n        <CardExpiryMonth>12</CardExpiryMonth>\n        <CardExpiryYear>2020</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n    <Customer>\n        <EmailAddress>accept@email.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>11114444</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": "ACI 21 It's being validated by the provider."
					},
					"response": []
				},
				{
					"name": "ACI-33 - AUTH",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n        <Amount>100000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>5404000000000001</CardNumber>\n        <!--<CardNumber>4539791001730106</CardNumber>-->\n        <CardHolder>James Rodriguez</CardHolder>\n        <CardExpiryMonth>02</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n    <Customer>\n        <DeviceFingerprint>test</DeviceFingerprint>\n        <EmailAddress>accept@email.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>11114444</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n    <!-- <ShippingAddress>-->\n    <!-- \t\t<CustomerName>Carlos Pellegrino</CustomerName>-->\n    <!--<EmailAddress>testing@email.com</EmailAddress>-->\n    <!--<Street1>Chacabuco 600</Street1>-->\n    <!--<City>New York</City>-->\n    <!--<State>New York</State>-->\n    <!--<Country>USA</Country>-->\n    <!--<Zip>10001</Zip>-->\n    <!--<TelNo>12315689</TelNo>-->\n    <!--<ShippingMethod>A</ShippingMethod>-->\n    <!-- </ShippingAddress>-->\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ACI-33 - ONESTEP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>DRC03600037</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>OneStepPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <TokenizeAction>ADD</TokenizeAction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n        <Amount>100000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111111111</CardNumber>\n        <CardHolder>James Rodriguez</CardHolder>\n        <CardExpiryMonth>02</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n    <Customer>\n        <DeviceFingerprint>test</DeviceFingerprint>\n        <EmailAddress>testing@email.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>11114444</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n    <ShippingAddress>\n        <CustomerName>Carlos Pellegrino</CustomerName>\n        <EmailAddress>testing@email.com</EmailAddress>\n        <Street1>Chacabuco 600</Street1>\n        <City>New York</City>\n        <State>NY</State>\n        <Country>US</Country>\n        <Zip>10001</Zip>\n        <TelNo>12315689</TelNo>\n        <!--<ShippingMethod>A</ShippingMethod>-->\n   \n    </ShippingAddress>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ACI-35 - FRAUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>FraudScreen</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>100000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4539791001730106</CardNumber>\n        <CardHolder>James Rodriguez</CardHolder>\n        <CardExpiryMonth>02</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n\t   <Customer>\n        <DeviceFingerprint>test</DeviceFingerprint>\n        <EmailAddress>testing@email.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>11114444</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n    <Item>\n        <LineItemNr>1</LineItemNr>\n        <ItemCode>999</ItemCode>\n        <ItemSKU>abc123</ItemSKU>\n        <ItemDescription>this is a ticket</ItemDescription>\n        <ItemQuantity>80</ItemQuantity>\n        <ItemAmount>789654258</ItemAmount>\n        <ItemTotal>300</ItemTotal>\n        <ItemShipNr>21</ItemShipNr>\n    </Item>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ACI-36 - FRAUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>FraudScreen</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>100000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111111111</CardNumber>\n        <CardHolder>James Rodriguez</CardHolder>\n        <CardExpiryMonth>02</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n    <Customer>\n        <DeviceFingerprint>test</DeviceFingerprint>\n        <EmailAddress>testing@email.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>11114444</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n    <ShippingAddress>\n        <CustomerName>Carlos Pellegrino</CustomerName>\n        <EmailAddress>testing@email.com</EmailAddress>\n        <Street1>Chacabuco 600</Street1>\n        <City>New York</City>\n        <State>NY</State>\n        <Country>US</Country>\n        <Zip>10001</Zip>\n        <TelNo>12315689</TelNo>\n    </ShippingAddress>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ACI-37 - FRAUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>FraudScreen</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>100000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111111111</CardNumber>\n        <CardHolder>James Rodriguez</CardHolder>\n        <CardExpiryMonth>02</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n    <Customer>\n        <DeviceFingerprint>test</DeviceFingerprint>\n        <EmailAddress>testing@email.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>11114444</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n    <ShippingAddress>\n        <CustomerName>Carlos Pellegrino</CustomerName>\n        <EmailAddress>testing@email.com</EmailAddress>\n        <Street1>Chacabuco 600</Street1>\n        <City>New York</City>\n        <State>NY</State>\n        <Country>US</Country>\n        <Zip>10001</Zip>\n        <TelNo>12315689</TelNo>\n    </ShippingAddress>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ACI-38.1 - ADD Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is AlphaSecure\"] = responseBody.has(\"<ProviderName>AlphaSecure</ProviderName>\");",
									"",
									"postman.setEnvironmentVariable('PerProvider_token', jsonObject.TransactionResponse.MethodResult.SecureToken);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>ABC123</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>Tokenize</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <TokenizeAction>ADD</TokenizeAction>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ACI-38.2 - FRAUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>ABC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>FraudScreen</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n        <Amount>5000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n        <TokenizeAction>Retrieve</TokenizeAction>\n    </Transaction>\n    <SecureTokenHolder>\n        <SecureToken>{{PerProvider_token}}</SecureToken>\n    </SecureTokenHolder>\n    <Customer>\n        <EmailAddress>accept@email.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>11114444</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ACI-39.1 - FRAUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);",
									"",
									"var randomTransactionIdentifier = Math.floor(Math.random()*900000)",
									"",
									"postman.setEnvironmentVariable('TransactionIdentifier',randomTransactionIdentifier);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>ABC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>FraudScreen</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{TransactionIdentifier}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>100000</Amount>\n        <Method>CC</Method>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4539791001730106</CardNumber>\n        <CardHolder>Carlos Pellegrino</CardHolder>\n        <CardExpiryMonth>02</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n    <Customer>\n        <DeviceFingerprinteviceFingerprint>\n        <EmailAddress>accept@email.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>11114444</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "ACI-42 - FRAUD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ACI\"] = responseBody.has(\"<ProviderName>ACI ReD Shield</ProviderName>\");",
									"postman.setEnvironmentVariable('ACIAuthMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>FraudScreen</TransactionType>\n        <Version>2</Version>\n        <Custom1>aci</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n        <Amount>100000</Amount>\n        <ChannelType>07</ChannelType>\n        <Method>CC</Method>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4539791001730106</CardNumber>\n        <CardHolder>James Rodriguez</CardHolder>\n        <CardExpiryMonth>12</CardExpiryMonth>\n        <CardExpiryYear>2020</CardExpiryYear>\n        <CardType>VISA</CardType>\n        <BIN>453979</BIN>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n    <Customer>\n        <EmailAddress>accept@email.com</EmailAddress>\n        <IPAddress>115.125.14.12</IPAddress>\n        <DateofBirth>11114444</DateofBirth>\n        <TelNo>5212345678901</TelNo>\n    </Customer>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "AMEX",
			"description": "",
			"item": [
				{
					"name": "1.1. AMEX - AUTH (capture, refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is AMEX\"] = responseBody.has(\"<ProviderName>AMEX</ProviderName>\");",
									"tests[\"Is Payment Info present\"] = responseBody.has(\"<PaymentInfo>\");",
									"postman.setEnvironmentVariable('AMEXCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC1234</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>amex</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>1000</Amount>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>373953192351004</CardNumber>\n        <CardHolder>JANE SMITH</CardHolder>\n        <CardExpiryMonth>01</CardExpiryMonth>\n        <CardExpiryYear>2019</CardExpiryYear>\n        <CardCVV>1234</CardCVV>\n        <CardType>Amex</CardType>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. AMEX - CAPTURE (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is AMEX\"] = responseBody.has(\"<ProviderName>AMEX</ProviderName>\");",
									"postman.setEnvironmentVariable('AMEXRefundMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>amex</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{AMEXCaptureMTtxnID}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.3. AMEX - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is AMEX\"] = responseBody.has(\"<ProviderName>AMEX</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>amex</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{AMEXRefundMTtxnID}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.4. AMEX - CANCELREFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is AMEX\"] = responseBody.has(\"<ProviderName>AMEX</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>amex</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{AMEXRefundMTtxnID}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1. AMEX - AUTH (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is AMEX\"] = responseBody.has(\"<ProviderName>AMEX</ProviderName>\");",
									"tests[\"Is Payment Info present\"] = responseBody.has(\"<PaymentInfo>\");",
									"postman.setEnvironmentVariable('AMEXCancelAuthMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APC123</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>amex</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>1000</Amount>\n        <ChannelType>07</ChannelType>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>373953192351004</CardNumber>\n        <CardHolder>JANE SMITH</CardHolder>\n        <CardExpiryMonth>01</CardExpiryMonth>\n        <CardExpiryYear>2019</CardExpiryYear>\n        <CardCVV>1234</CardCVV>\n        <CardType>Amex</CardType>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2. AMEX - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is AMEX\"] = responseBody.has(\"<ProviderName>AMEX</ProviderName>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>amex</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{AMEXCancelAuthMTxnID}}</MerchantTxnID>     \r\n        <Currency>EUR</Currency>\r\n        <Amount>1000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "BrasPag",
			"description": "",
			"item": [
				{
					"name": "1.1. BrasPag - AUTH (capture,refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is BrasPag\"] = responseBody.has(\"<ProviderName>Braspag</ProviderName>\");",
									"postman.setEnvironmentVariable('BrasPagCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>braspag</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>BRL</Currency>\r\n        <Amount>1000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. BrasPag - CAPTURE (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is BrasPag\"] = responseBody.has(\"<ProviderName>Braspag</ProviderName>\");",
									"postman.setEnvironmentVariable('BrasPagRefundMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>braspag</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{BrasPagCaptureMTtxnID}}</MerchantTxnID>\r\n        <Currency>BRL</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.3. BrasPag - REFUND (auth)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is BrasPag\"] = responseBody.has(\"<ProviderName>Braspag</ProviderName>\");",
									"postman.setEnvironmentVariable('BrasPagRefoundMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>braspag</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{BrasPagCaptureMTtxnID}}</MerchantTxnID>\r\n        <Currency>BRL</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1. BrasPag - AUTH (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is BrasPag\"] = responseBody.has(\"<ProviderName>Braspag</ProviderName>\");",
									"postman.setEnvironmentVariable('BrasPagCancelMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>braspag</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>BRL</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2. BrasPag - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is BrasPag\"] = responseBody.has(\"<ProviderName>Braspag</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>braspag</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{BrasPagCancelMTtxnID}}</MerchantTxnID>\r\n        <Currency>BRL</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.1. BrasPag - ONESTEP  (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is BrasPag\"] = responseBody.has(\"<ProviderName>Braspag</ProviderName>\");",
									"postman.setEnvironmentVariable('BrasPagRefundOneStepMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>braspag</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>BRL</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.2. BrasPag - REFUND (onestep)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is BrasPag\"] = responseBody.has(\"<ProviderName>Braspag</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>braspag</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{BrasPagRefundOneStepMTtxnID}}</MerchantTxnID>        \r\n        <Currency>BRL</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "4.1. BrasPag - CREDIT (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is BrasPag\"] = responseBody.has(\"<ProviderName>Braspag</ProviderName>\");",
									"postman.setEnvironmentVariable('BrasPagCreditMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>braspag</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>BRL</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "4.2. BrasPag - CANCEL (credit)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is BrasPag\"] = responseBody.has(\"<ProviderName>Braspag</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>braspag</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{BrasPagCreditMTtxnID}}</MerchantTxnID>\r\n        <Currency>BRL</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "EGlobal",
			"description": "",
			"item": [
				{
					"name": "1.1. EGlobal - AUTH (capture, refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is EGlobal\"] = responseBody.has(\"<ProviderName>EGlobal</ProviderName>\");",
									"postman.setEnvironmentVariable('EGlobalCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>eglobal</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>MXN</Currency>\r\n        <Amount>000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5206987603858993</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. EGlobal - CAPTURE (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is EGlobal\"] = responseBody.has(\"<ProviderName>EGlobal</ProviderName>\");",
									"postman.setEnvironmentVariable('EGlobalRefundMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>eglobal</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{EGlobalCaptureMTtxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": "EC-53"
					},
					"response": []
				},
				{
					"name": "1.3. EGlobal - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is EGlobal\"] = responseBody.has(\"<ProviderName>EGlobal</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>eglobal</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{EGlobalRefundMTtxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": "EC-53"
					},
					"response": []
				},
				{
					"name": "1.4. EGlobal - CANCELREFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is EGlobal\"] = responseBody.has(\"<ProviderName>EGlobal</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>eglobal</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{EGlobalRefundMTtxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": "EC-53"
					},
					"response": []
				},
				{
					"name": "2.1. EGlobal - AUTH (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is EGlobal\"] = responseBody.has(\"<ProviderName>EGlobal</ProviderName>\");",
									"postman.setEnvironmentVariable('EglobalCancelAuthMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>eglobal</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>MXN</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5206987603858993</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2. EGlobal - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is EGlobal\"] = responseBody.has(\"<ProviderName>EGlobal</ProviderName>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>QAUserID</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>CancelPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>eglobal</Custom1>\n    </Header>\n    <Transaction>\n        <TerminalID>GEN00001</TerminalID>\n        <MerchantTxnID>{{EglobalCancelAuthMTxnID}}</MerchantTxnID>\n        <Currency>MXN</Currency>\n        <Amount>10000</Amount>\n        <ChannelType>07</ChannelType>\n        <Method>CC</Method>\n    </Transaction>\n    <SoftDescriptor>\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\n    </SoftDescriptor>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.1. EGlobal - AUTH (Credit, cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is EGlobal\"] = responseBody.has(\"<ProviderName>EGlobal</ProviderName>\");",
									"postman.setEnvironmentVariable('EglobalCancelAuthMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>eglobal</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>MXN</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5206987603858993</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.2. EGlobal - CANCEL (Credit)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is EGlobal\"] = responseBody.has(\"<ProviderName>EGlobal</ProviderName>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>eglobal</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{EglobalCancelAuthMTxnID}}</MerchantTxnID>        \r\n        <Currency>MXN</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "FirstData",
			"description": "",
			"item": [
				{
					"name": "RS2 - aud",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									"postman.setEnvironmentVariable('FDAUCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>      \r\n        <Currency>AUD</Currency>\r\n        <Amount>000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. FirstDataAU - CAPTURE (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									"postman.setEnvironmentVariable('FDAURefundMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{FDAUCaptureMTtxnID}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.3. FirstDataAU - REFUND (auth)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{FDAURefundMTtxnID}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.4. FirstDataAU - CANCELREFUND (auth)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{FDAURefundMTtxnID}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1. FirstDataAU - AUTH (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									"postman.setEnvironmentVariable('FDAUCancelMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>     \r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2. FirstDataAU - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{FDAUCancelMTtxnID}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.1. FirstDataAU - ONESTEP  (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									"postman.setEnvironmentVariable('FDAURefundOneStepMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.2. FirstDataAU - REFUND (onestep)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{FDAURefundOneStepMTtxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.3. FirstDataAU - CANCELREFUND (onestep)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{FDAURefundOneStepMTtxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "4.1 FirstDataAU - CREDIT (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									"postman.setEnvironmentVariable('FDAUCreditMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "4.2. FirstDataAU - CANCEL (credit)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{FDAUCreditMTtxnID}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "5.1. FirstDataAU - ONESTEP  (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									"postman.setEnvironmentVariable('FDAURefundOneStepMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "5.2. FirstDataAU - CANCEL (credit)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is FirstDataAU\"] = responseBody.has(\"<ProviderName>FirstDataAU</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>firstdataau</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "ITMX-MPI",
			"description": "",
			"item": [
				{
					"name": "1.1 ITMX-MPI - EnrolCheck",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ITMX-MPI\"] = responseBody.has(\"<ProviderName>ITMX-MPI</ProviderName>\");",
									"postman.setEnvironmentVariable('ITMXMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "providerEndpoint",
								"value": "https://auth.lsswebuat.itmx.co.th:8101/itmx/initiate/"
							},
							{
								"key": "AcquirerBIN",
								"value": "006000"
							},
							{
								"key": "name",
								"value": "TestMerchantKTB"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>  \r\n  <Header>                    \r\n    <UserID>APC123</UserID>                    \r\n    <MerchantID>JuanTMerch</MerchantID>                   \r\n    <TransactionType>EnrolCheck</TransactionType>\r\n    <Version>2</Version>  \r\n  </Header>  \r\n  <Transaction>\r\n    <MerchantTxnID>{{transaction_id}}</MerchantTxnID> \r\n    <Currency>SGD</Currency>                    \r\n    <Amount>10000</Amount>       \r\n    <TxnDetails>DummyTran</TxnDetails>\r\n  </Transaction>  \r\n  <CardDetails>                    \r\n    <CardNumber>4632087300032534</CardNumber>\r\n    <CardHolder>SATYA T</CardHolder>\r\n    <CardExpiryMonth>11</CardExpiryMonth>\r\n    <CardExpiryYear>2019</CardExpiryYear>\r\n    <CardCVV>012</CardCVV>\r\n    <BIN></BIN>\r\n  </CardDetails>\r\n  <SoftDescriptor>\r\n    <MerchantLocation>www.ktbepaytst.com</MerchantLocation>\r\n  </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2 ITMX-MPI - ResponseCheck",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ITMX-MPI\"] = responseBody.has(\"<ProviderName>ITMX-MPI</ProviderName>\");",
									"postman.setEnvironmentVariable('ITMXMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "providerEndpoint",
								"value": "https://auth.lsswebuat.itmx.co.th:8101/itmx/initiate/"
							},
							{
								"key": "acquirerbin",
								"value": "006000"
							},
							{
								"key": "name",
								"value": "TestMerchantKTB"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<TransactionRequest>\r\n\t<Header>                    \r\n    <UserID>APC123</UserID>                    \r\n    <MerchantID>JuanTMerch</MerchantID>                    \r\n\t\t<TransactionType>ResponseCheck</TransactionType>                    \r\n\t\t<Version>2</Version>  \r\n\t</Header>  \r\n   <Transaction>\r\n\t\t<MerchantTxnID>{{transaction_id}}</MerchantTxnID>                    \r\n\t\t<Currency>SGD</Currency>                    \r\n\t\t<Amount>10000</Amount>       \r\n\t\t<TxnDetails>DummyTran</TxnDetails>\r\n   </Transaction>\r\n   <ThreeDSecure>\r\n      <PARes>MIIEXQYJKoZIhvcNAQcDoIIETjCCBEoCAQAxggFCMIIBPgIBADAmMBIxEDAOBgNVBAMTB0NBLVZNMDMCEEN7GIOUMOq/S1hHA2cY1NwwDQYJKoZIhvcNAQEBBQAEggEABclyMEAZetO1q0oTsgqfDXE9XXlDkcVyAu/bZyiTcn7NWb4bHyX5uLVWpOKMjtqQ6e9beBm/u6/JbLMEz68M/cvcW1iJXcajohilpzzxIxPHtsWP2wSL4tn2MI8n+XMzL2TL1S8qg6CNOL2V/yo2V9oxRJ1Wc9wxgs6JMz99NQgHQabFgJiTT+dpoAfQumXrJzF7qq/DF/4KVNVs21gDuDB3D8YZ+sKLArREdtYM7CfV8CxcvuoAHg9numE05uDuw0DcHOSFvIBBCrgSeR4O2kIpzmKxTu3gXL3Au1FQA4eBiFx6PfWmZahiIszw+Tay2ImvvjwDJVX0KrUu6DSTMzCCAv0GCSqGSIb3DQEHATAUBggqhkiG9w0DBwQIrHsv9YPkY2eAggLYsKtBj6vi9xwByL2L7XA4wiAaPPTZrXxDA0P2zucZB7Owj0mm1oeULpnYmDApJwyf/BUhRDtx0a0Q1rkKGDjPNjYPetC2MxRiVgMa3ipdVPU84rW6XM4VoloDvaTUjzwV3NCEIWYCz72/NOtnA3F4diUCx06HJp/AaJdYymGNx355UZtZiKO7EHD64/J5RzTW+B5AblXPj/P3kovUOfaE1xdpeoJkpdBIUfkUEYs9zUnJvHsPo/zre61d4JMfBNdz6DKEzFFbRvjloGVoTt2jwv10iaSwTByTrlFXhNH/HZ+FPa4xWa1wZOH9iIcjewIPkrmG1rMnRvznzgAEe6UwHKrDOSBcBr+xvHmDX/GikF9tFt1RibsqIrqEJtMENeViuZq+RCbwM+RyrjHZ8L2Y47CMy3AefLXy7jU7jKiHtH8FJz7zdRYt4GQ0Ii7xH4/cEZqxuqbLTbMhbw/o6GojrIcIOR2fgL0eu4VN2uroDSBJPOtz9LVxh6L7mxIRC5Xi8rOqrnd1NiP22y4m8YaDm2jJH1P8/3HPWTeYuoAmyRl4f6rAnz1hswMnWj25yOpavlwJgnnunFSuY/H/V+dNs2dir/fwvj6fNRM7ElPMU8Vyg/6/YQlbqqPHpJWqPmxFUk1xnMabSMzYANmGadwJlCBFuYnVx5SlxnMlx70KaJPkP4jbOjpulqOotW1s2+TwGGhRCJ7sVU4hH1FwlfanEV0PdSKZP/y7RMmc7PzLvFDvFkXKQLkEkqCOJSCs5v8CqO5wYWCegmyFkYYYH9m4xh8tDngpov9LCSRDxr4WHxpWqY7G/Uk06656ppYPuBRsRnrEt/pzGx8PFXbQLmE3Ey1i4RJFpRESsYicgnrj8g9VVnBGrPrYMBRMapUahxU3iXm++nLJq2/vVSwzALEb1LZYPYPGRWn2xGVHbdTRNzXSWdaRmK9V866Kt6pvmE7TooSlS6ZiWr4=</PARes>\r\n   </ThreeDSecure>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1 ITMX-MPI - EnrolCheck 1050",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ITMX-MPI\"] = responseBody.has(\"<ProviderName>ITMX-MPI</ProviderName>\");",
									"postman.setEnvironmentVariable('ITMXMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "providerEndpoint",
								"value": "https://auth.lsswebuat.itmx.co.th:8101/itmx/initiate/"
							},
							{
								"key": "AcquirerBIN",
								"value": "006000"
							},
							{
								"key": "name",
								"value": "TestMerchantKTB"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>  \r\n  <Header>                    \r\n    <UserID>API001</UserID>                    \r\n    <MerchantID>DiegoZ</MerchantID>                   \r\n    <TransactionType>EnrolCheck</TransactionType>\r\n    <Version>2</Version>  \r\n  </Header>  \r\n  <Transaction>\r\n    <MerchantTxnID>123</MerchantTxnID> \r\n    <Currency>SGD</Currency>                    \r\n    <Amount>10000</Amount>       \r\n    <TxnDetails>DummyTran</TxnDetails>\r\n  </Transaction>  \r\n  <CardDetails>                    \r\n    <CardNumber>4632087300032534</CardNumber>\r\n    <CardHolder>SATYA T</CardHolder>\r\n    <CardExpiryMonth>11</CardExpiryMonth>\r\n    <CardExpiryYear>2019</CardExpiryYear>\r\n    <CardCVV>012</CardCVV>\r\n    <BIN></BIN>\r\n  </CardDetails>\r\n  <SoftDescriptor>\r\n    <MerchantLocation>www.ktbepaytst.com</MerchantLocation>\r\n  </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2 ITMX-MPI - EnrolCheck 1031",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ITMX-MPI\"] = responseBody.has(\"<ProviderName>ITMX-MPI</ProviderName>\");",
									"postman.setEnvironmentVariable('ITMXMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "providerEndpoint",
								"value": "https://auth.lsswebuat.itmx.co.th:8101/itmx/initiate/"
							},
							{
								"key": "AcquirerBIN",
								"value": "006000"
							},
							{
								"key": "name",
								"value": "TestMerchantKTB"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>  \r\n  <Header>                    \r\n    <UserID>API001</UserID>                    \r\n    <MerchantID>DiegoZ</MerchantID>                   \r\n    <TransactionType>EnrolCheck</TransactionType>\r\n    <Version>2</Version>  \r\n  </Header>  \r\n  <Transaction>\r\n    <MerchantTxnID>123</MerchantTxnID> \r\n    <Currency>ARG</Currency>                    \r\n    <Amount>10000</Amount>       \r\n    <TxnDetails>DummyTran</TxnDetails>\r\n  </Transaction>  \r\n  <CardDetails>                    \r\n    <CardNumber>4632087300032534</CardNumber>\r\n    <CardHolder>SATYA T</CardHolder>\r\n    <CardExpiryMonth>11</CardExpiryMonth>\r\n    <CardExpiryYear>2019</CardExpiryYear>\r\n    <CardCVV>012</CardCVV>\r\n    <BIN></BIN>\r\n  </CardDetails>\r\n  <SoftDescriptor>\r\n    <MerchantLocation>www.ktbepaytst.com</MerchantLocation>\r\n  </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.3 ITMX-MPI - EnrolCheck 1064",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ITMX-MPI\"] = responseBody.has(\"<ProviderName>ITMX-MPI</ProviderName>\");",
									"postman.setEnvironmentVariable('ITMXMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "providerEndpoint",
								"value": "https://auth.lsswebuat.itmx.co.th:8101/itmx/initiate/"
							},
							{
								"key": "AcquirerBIN",
								"value": "006000"
							},
							{
								"key": "name",
								"value": "TestMerchantKTB"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>  \r\n  <Header>                    \r\n    <UserID>API001</UserID>                    \r\n    <MerchantID>QAT001</MerchantID>                   \r\n    <TransactionType>EnrolCheck</TransactionType>\r\n    <Version>2</Version>  \r\n  </Header>  \r\n  <Transaction>\r\n    <MerchantTxnID>123</MerchantTxnID> \r\n    <Currency>SGD</Currency>                    \r\n    <Amount>10000</Amount>       \r\n    <TxnDetails>DummyTran</TxnDetails>\r\n  </Transaction>  \r\n  <CardDetails>                    \r\n    <CardNumber>4632087300032534</CardNumber>\r\n    <CardHolder>SATYA T</CardHolder>\r\n    <CardExpiryMonth>11</CardExpiryMonth>\r\n    <CardExpiryYear>2019</CardExpiryYear>\r\n    <CardCVV>012</CardCVV>\r\n    <BIN></BIN>\r\n  </CardDetails>\r\n  <SoftDescriptor>\r\n    <MerchantLocation>www.ktbepaytst.com</MerchantLocation>\r\n  </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.4 ITMX-MPI - EnrolCheck 1012",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ITMX-MPI\"] = responseBody.has(\"<ProviderName>ITMX-MPI</ProviderName>\");",
									"postman.setEnvironmentVariable('ITMXMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "providerEndpoint",
								"value": "https://auth.lsswebuat.itmx.co.th:8101/itmx/initiate/"
							},
							{
								"key": "AcquirerBIN",
								"value": "006000"
							},
							{
								"key": "name",
								"value": "TestMerchantKTB"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>  \r\n  <Header>                    \r\n    <UserID>API001</UserID>                    \r\n    <MerchantID>DiegoZ</MerchantID>                   \r\n    <TransactionType>AuthPayment</TransactionType>\r\n    <Version>2</Version>  \r\n  </Header>  \r\n  <Transaction>\r\n    <MerchantTxnID>123</MerchantTxnID> \r\n    <Currency>SGD</Currency>                    \r\n    <Amount>10000</Amount>       \r\n    <TxnDetails>DummyTran</TxnDetails>\r\n  </Transaction>  \r\n  <CardDetails>                    \r\n    <CardNumber>4632087300032534</CardNumber>\r\n    <CardHolder>SATYA T</CardHolder>\r\n    <CardExpiryMonth>11</CardExpiryMonth>\r\n    <CardExpiryYear>2019</CardExpiryYear>\r\n    <CardCVV>012</CardCVV>\r\n    <BIN></BIN>\r\n  </CardDetails>\r\n  <SoftDescriptor>\r\n    <MerchantLocation>www.ktbepaytst.com</MerchantLocation>\r\n  </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.5 ITMX-MPI - EnrolCheck 1012",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ITMX-MPI\"] = responseBody.has(\"<ProviderName>ITMX-MPI</ProviderName>\");",
									"postman.setEnvironmentVariable('ITMXMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "providerEndpoint",
								"value": "https://auth.lsswebuat.itmx.co.th:8101/itmx/initiate/"
							},
							{
								"key": "AcquirerBIN",
								"value": "006000"
							},
							{
								"key": "name",
								"value": "TestMerchantKTB"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>  \r\n  <Header>                    \r\n    <UserID>API001</UserID>                    \r\n    <MerchantID>QAT001</MerchantID>                   \r\n    <TransactionType>EnrolCheck</TransactionType>\r\n    <Version>2</Version>  \r\n  </Header>  \r\n  <Transaction>\r\n    <MerchantTxnID>123</MerchantTxnID> \r\n    <Currency>SGD</Currency>                    \r\n    <Amount>10000</Amount>       \r\n    <TxnDetails>DummyTran</TxnDetails>\r\n  </Transaction>  \r\n  <CardDetails>                    \r\n    <CardNumber>4632087300032534</CardNumber>\r\n    <CardHolder>SATYA T</CardHolder>\r\n    <CardExpiryMonth>11</CardExpiryMonth>\r\n    <CardExpiryYear>2016</CardExpiryYear>\r\n    <CardCVV>012</CardCVV>\r\n    <BIN></BIN>\r\n  </CardDetails>\r\n  <SoftDescriptor>\r\n    <MerchantLocation>www.ktbepaytst.com</MerchantLocation>\r\n  </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.1  ITMX-MPI - ResponseCheck 1003",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is ITMX-MPI\"] = responseBody.has(\"<ProviderName>ITMX-MPI</ProviderName>\");",
									"postman.setEnvironmentVariable('ITMXMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "providerEndpoint",
								"value": "https://auth.lsswebuat.itmx.co.th:8101/itmx/initiate/"
							},
							{
								"key": "acquirerbin",
								"value": "006000"
							},
							{
								"key": "name",
								"value": "TestMerchantKTB"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<TransactionRequest>\r\n\t<Header>                    \r\n\t\t<UserID>API001</UserID>                    \r\n\t\t<MerchantID>DiegoZ</MerchantID>                    \r\n\t\t<TransactionType>ResponseCheck</TransactionType>                    \r\n\t\t<Version>2</Version>  \r\n\t</Header>  \r\n   <Transaction>\r\n\t\t<MerchantTxnID>{{transaction_id}}</MerchantTxnID>                    \r\n\t\t<Currency>SGD</Currency>                    \r\n\t\t<Amount>10000</Amount>       \r\n\t\t<TxnDetails>DummyTran</TxnDetails>\r\n   </Transaction>\r\n   <ThreeDSecure>\r\n      <PARes>abc123</PARes>\r\n   </ThreeDSecure>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "MasterPayment",
			"description": "",
			"item": [
				{
					"name": "1.1. MasterPayment - AUTH (capture, refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									"postman.setEnvironmentVariable('MasterPaymentCaptureMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. MasterPayment - CAPTURE (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									"postman.setEnvironmentVariable('MasterPaymentRefundMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{MasterPaymentCaptureMTxnID}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.3. MasterPayment - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{MasterPaymentRefundMTxnID}}</MerchantTxnID>        \r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.4. MasterPayment - CANCELREFUND (auth)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{MasterPaymentRefundMTxnID}}</MerchantTxnID>        \r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1. MasterPayment - AUTH (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									"postman.setEnvironmentVariable('MasterPaymentCancelMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2. MasterPayment - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{MasterPaymentCancelMTxnID}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.1. MasterPayment - ONESTEP  (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									"postman.setEnvironmentVariable('MasterPaymentRefundOneStepMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.2. MasterPayment - REFUND (onestep)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{MasterPaymentRefundOneStepMTtxnID}}</MerchantTxnID> \r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.3. MasterPayment - CANCELREFUND (onestep)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{MasterPaymentRefundOneStepMTtxnID}}</MerchantTxnID> \r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "NAB",
			"description": "",
			"item": [
				{
					"name": "1.1. NAB - AUTH",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('m_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									"postman.setEnvironmentVariable('MasterPaymentCaptureMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n  <Header>\r\n    <UserID>TEST</UserID>\r\n    <MerchantID>NABTest</MerchantID>\r\n    <TransactionType>AuthPayment</TransactionType>\r\n    <Version>2</Version>\r\n  </Header>\r\n  <Transaction>\r\n    <MerchantTxnID>{{m_txn_id}}</MerchantTxnID>\r\n    <Currency>AUD</Currency>\r\n    <Amount>10000</Amount>\r\n    <ChannelType>07</ChannelType>\r\n    <Method>CC</Method>\r\n    <TxnDetails>TxnDetails</TxnDetails>\r\n  </Transaction>\r\n  <CardDetails>\r\n    <CardNumber>4111111111111111</CardNumber>\r\n    <CardHolder>Test</CardHolder>\r\n    <CardExpiryMonth>11</CardExpiryMonth>\r\n    <CardExpiryYear>2017</CardExpiryYear>\r\n    <CardCVV>333</CardCVV>\r\n  </CardDetails>\r\n</TransactionRequest>\r\n"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. NAB - CAPTURE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									"postman.setEnvironmentVariable('MasterPaymentRefundMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>APCTEST001</UserID>\n        <MerchantID>NABTest</MerchantID>\n        <TransactionType>CapturePayment</TransactionType>\n        <Version>2</Version>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{m_txn_id}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n        <Amount>10000</Amount>\n        <ChannelType>07</ChannelType>\n        <Method>CC</Method>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.3. NAB - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>APCTEST001</UserID>\r\n        <MerchantID>NABTest</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{m_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>\r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.4. NAB - CANCELREFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{MasterPaymentRefundMTxnID}}</MerchantTxnID>        \r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1. NAB - CREDIT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('m_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									"postman.setEnvironmentVariable('MasterPaymentCancelMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>test</UserID>\n        <MerchantID>NABTest</MerchantID>\n        <TransactionType>CreditPayment</TransactionType>\n        <Version>2</Version>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{m_txn_id}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n        <Amount>17000</Amount>\n        <ChannelType>07</ChannelType>\n        <Method>CC</Method>\n        <SettlementCurrency>AUD</SettlementCurrency>\n        <Partial>false</Partial>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111111111</CardNumber>\n        <CardHolder>Test</CardHolder>\n        <CardExpiryMonth>11</CardExpiryMonth>\n        <CardExpiryYear>2017</CardExpiryYear>\n        <CardCVV>333</CardCVV>\n    </CardDetails>\n    <Customer>\n        <IPAddress>000.000.000.000</IPAddress>\n    </Customer>\n    <BillingAddress>\n        <Country>AU</Country>\n    </BillingAddress>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2. NAB - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{MasterPaymentCancelMTxnID}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.1. NAB - ONESTEP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('m_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									"postman.setEnvironmentVariable('MasterPaymentRefundOneStepMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n  <Header>\r\n    <UserID>TEST</UserID>\r\n    <MerchantID>NABTest</MerchantID>\r\n    <TransactionType>OneStepPayment</TransactionType>\r\n    <Version>2</Version>\r\n  </Header>\r\n  <Transaction>\r\n    <MerchantTxnID>{{m_txn_id}}</MerchantTxnID>\r\n    <Currency>AUD</Currency>\r\n    <Amount>10000</Amount>\r\n    <ChannelType>07</ChannelType>\r\n    <Method>CC</Method>\r\n    <TxnDetails>TxnDetails</TxnDetails>\r\n  </Transaction>\r\n  <CardDetails>\r\n    <CardNumber>4111111111111111</CardNumber>\r\n    <CardHolder>Test</CardHolder>\r\n    <CardExpiryMonth>11</CardExpiryMonth>\r\n    <CardExpiryYear>2017</CardExpiryYear>\r\n    <CardCVV>333</CardCVV>\r\n  </CardDetails>\r\n</TransactionRequest>\r\n"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.2. NAB - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>APCTEST001</UserID>\r\n        <MerchantID>NABTest</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{m_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>\r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.3. NAB - CANCELREFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is MasterPayment\"] = responseBody.has(\"<ProviderName>MasterPayment</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>masterpayment</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{MasterPaymentRefundOneStepMTtxnID}}</MerchantTxnID> \r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "N&TS",
			"description": "",
			"item": [
				{
					"name": "1.1 N&TS - AUTH (capture, refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is NTS\"] = responseBody.has(\"<ProviderName>NTS</ProviderName>\");",
									"postman.setEnvironmentVariable('NTSCaptureMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>n-and-ts</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>        \r\n        <Currency>EUR</Currency>\r\n        <Amount>000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor2</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2 N&TS - CAPTURE (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is NTS\"] = responseBody.has(\"<ProviderName>NTS</ProviderName>\");",
									"postman.setEnvironmentVariable('NTSRefundMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>n-and-ts</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{NTSCaptureMTxnID}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.3 N&TS - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is NTS\"] = responseBody.has(\"<ProviderName>NTS</ProviderName>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>n-and-ts</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{NTSRefundMTxnID}}</MerchantTxnID>        \r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1 N&TS - AUTH (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is NTS\"] = responseBody.has(\"<ProviderName>NTS</ProviderName>\");",
									"postman.setEnvironmentVariable('NTSCancelMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>n-and-ts</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>        \r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor2</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2 N&TS - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is NTS\"] = responseBody.has(\"<ProviderName>NTS</ProviderName>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>n-and-ts</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{NTSCancelMTxnID}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.1 N&TS - ONESTEP  (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is NTS\"] = responseBody.has(\"<ProviderName>NTS</ProviderName>\");",
									"postman.setEnvironmentVariable('NTSRefundOneStepMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>n-and-ts</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>        \r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.2 N&TS - REFUND (onestep)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is NTS\"] = responseBody.has(\"<ProviderName>NTS</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>n-and-ts</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{NTSRefundOneStepMTtxnID}}</MerchantTxnID>        \r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "OSB",
			"description": "",
			"item": [
				{
					"name": "1.1 OSB - AUTH (capture, refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is OSB\"] = responseBody.has(\"<ProviderName>OSB</ProviderName>\");",
									"postman.setEnvironmentVariable('OSBCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>osb</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>XPF</Currency>\r\n        <Amount>1000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5970100300000000</CardNumber>\r\n        <CardHolder>Carlos Pellegrino</CardHolder>\r\n        <CardExpiryMonth>12</CardExpiryMonth>\r\n        <CardExpiryYear>2021</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n        <CardType>VISA</CardType>\r\n        <Custom1>1</Custom1>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2 OSB - CAPTURE (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is OSB\"] = responseBody.has(\"<ProviderName>OSB</ProviderName>\");",
									"postman.setEnvironmentVariable('OSBRefundMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>osb</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{OSBCaptureMTtxnID}}</MerchantTxnID>\r\n        <Currency>XPF</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": "Refund only works AFTER the settlement date is reached (Settlement date is received when sending a capture request)."
					},
					"response": []
				},
				{
					"name": "1.3 OSB - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1019\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1019\";",
									"tests[\"Provider Name is OSB\"] = responseBody.has(\"<ProviderName>OSB</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>osb</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{OSBRefundMTtxnID}}</MerchantTxnID>\r\n        <Currency>XPF</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": "Refund can only happen AFTER the settlement date has passed (the one found on the capture and onestep requests)"
					},
					"response": []
				},
				{
					"name": "2.1 OSB - AUTH (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is OSB\"] = responseBody.has(\"<ProviderName>OSB</ProviderName>\");",
									"postman.setEnvironmentVariable('OSBCancelMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>osb</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>XPF</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5970100300000000</CardNumber>\r\n        <CardHolder>Carlos Pellegrino</CardHolder>\r\n        <CardExpiryMonth>12</CardExpiryMonth>\r\n        <CardExpiryYear>2021</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n        <CardType>VISA</CardType>\r\n        <Custom1>1</Custom1>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2 OSB - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is OSB\"] = responseBody.has(\"<ProviderName>OSB</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>osb</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{OSBCancelMTxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.1 OSB - ONESTEP  (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"// tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"// tests[\"Provider Name is OSB\"] = responseBody.has(\"<ProviderName>OSB</ProviderName>\");",
									"postman.setEnvironmentVariable('OSBRefundOneStepMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>osb</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>XPF</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5970100300000000</CardNumber>\r\n        <CardHolder>Carlos Pellegrino</CardHolder>\r\n        <CardExpiryMonth>12</CardExpiryMonth>\r\n        <CardExpiryYear>2021</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n        <CardType>VISA</CardType>\r\n        <Custom1>1</Custom1>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": "Refund only works AFTER the settlement date is reached (Settlement date is received when sending a capture request)."
					},
					"response": []
				},
				{
					"name": "3.2 OSB - REFUND (onestep)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is OSB\"] = responseBody.has(\"<ProviderName>OSB</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>osb</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{OSBRefundOneStepMTtxnID}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>1000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": "Refund can only happen AFTER the settlement date has passed (the one found on the capture and onestep requests)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Payture",
			"description": "",
			"item": [
				{
					"name": "1.1. PAYTURE - AUTH",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"postman.setEnvironmentVariable('PAYTURECaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111100031</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>08</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. PAYTURE -  CAPTURE",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>CapturePayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{PAYTURECaptureMTtxnID}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1. PAYTURE -  AUTH",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"postman.setEnvironmentVariable('PAYTURECancelMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111100031</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>08</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2. PAYTURE - CANCEL",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>CancelPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{PAYTURECancelMTtxnID}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.1. PAYTURE - ONESTEP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"postman.setEnvironmentVariable('PAYTUREOnestepMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>OneStepPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111100031</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>11</CardExpiryMonth>\n        <CardExpiryYear>2019</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.2. PAYTURE - REFUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							},
							{
								"key": "PASSWORD",
								"value": "123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>RefundPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{PAYTUREOnestepMTtxnID}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "4.1. PAYTURE - AMOUNT_EXCEED",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1017\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1017\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"tests[\"APC Response Message\"] = responseBody.has(\"<ResponseMessage>Declined due to insufficient funds</ResponseMessage>\");",
									"tests[\"PAYTURE Response Message\"] = responseBody.has(\"<ProviderResponseMessage>The transaction amount exceeds the available card balance</ProviderResponseMessage>\");",
									"tests[\"PAYTURE Response\"] = responseBody.has(\"<ProviderResponse>AMOUNT_EXCEED</ProviderResponse>\");",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111101000000046</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>08</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "5.1. PAYTURE - PROCESSING_ERROR - AUTH",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1076\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1076\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"tests[\"APC Response Message\"] = responseBody.has(\"<ResponseMessage>Provider unable to process request</ResponseMessage>\");",
									"tests[\"PAYTURE Response Message\"] = responseBody.has(\"<ProviderResponseMessage>Common system error, registered by the payment network or the Issuer</ProviderResponseMessage>\");",
									"tests[\"PAYTURE Response\"] = responseBody.has(\"<ProviderResponse>PROCESSING_ERROR</ProviderResponse>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111100056</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>08</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "6.1. PAYTURE - ISSUER_BLOCKED_CARD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1037\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1037\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111100072</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>08</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "7.1. PAYTURE - ISSUER_CARD_FAIL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111100080</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>08</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "8.1. PAYTURE - PROCESSING_ERROR - CAPTURE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"tests[\"APC Response Message\"] = responseBody.has(\"<ResponseMessage>Request successful</ResponseMessage>\");",
									"tests[\"PAYTURE Response Message\"] = responseBody.has(\"<ProviderResponseMessage>The operation was completed without errors</ProviderResponseMessage>\");",
									"tests[\"PAYTURE Response\"] = responseBody.has(\"<ProviderResponse>SUCCESS</ProviderResponse>\");",
									"",
									"postman.setEnvironmentVariable('PAYTPROCESING_ERROCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111100221</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>08</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "8.2. PAYTURE - PROCESSING_ERROR - CAPTURE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1076\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1076\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"tests[\"APC Response Message\"] = responseBody.has(\"<ResponseMessage>Provider unable to process request</ResponseMessage>\");",
									"tests[\"PAYTURE Response Message\"] = responseBody.has(\"<ProviderResponseMessage>Common system error, registered by the payment network or the Issuer</ProviderResponseMessage>\");",
									"tests[\"PAYTURE Response\"] = responseBody.has(\"<ProviderResponse>PROCESSING_ERROR</ProviderResponse>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>CapturePayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{PAYTPROCESING_ERROCaptureMTtxnID}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "9.1. PAYTURE - TIME_OUT - AUTH",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"",
									"tests[\"APC Response code is 1040\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1040\";",
									"",
									"",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"",
									"",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"",
									"tests[\"APC Response Message\"] = responseBody.has(\"<ResponseMessage>Transaction timed out</ResponseMessage>\");",
									"",
									"",
									"tests[\"PAYTURE Response Message\"] = responseBody.has(\"<ProviderResponseMessage>Transaction timed out</ProviderResponseMessage>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4100401111100062</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>08</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "10.1. PAYTURE - TIME_OUT - CAPTURE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"tests[\"APC Response Message\"] = responseBody.has(\"<ResponseMessage>Request successful</ResponseMessage>\");",
									"",
									"tests[\"PAYTURE Response Message\"] = responseBody.has(\"<ProviderResponseMessage>The operation was completed without errors</ProviderResponseMessage>\");",
									"",
									"",
									"tests[\"PAYTURE Response\"] = responseBody.has(\"<ProviderResponse>SUCCESS</ProviderResponse>\");",
									"",
									"",
									"postman.setEnvironmentVariable('PAYTTimeOutCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4100401111100328</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>08</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "10.2. PAYTURE - TIME_OUT - CAPTURE",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1040\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1040\";",
									"",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"tests[\"APC Response Message\"] = responseBody.has(\"<ResponseMessage>Transaction timed out</ResponseMessage>\");",
									"",
									"tests[\"PAYTURE Response Message\"] = responseBody.has(\"<ProviderResponseMessage>Transaction timed out</ProviderResponseMessage>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>CapturePayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{PAYTTimeOutCaptureMTtxnID}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "11.1. PAYTURE - TIME_OUT - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"tests[\"APC Response Message\"] = responseBody.has(\"<ResponseMessage>Request successful</ResponseMessage>\");",
									"",
									"tests[\"PAYTURE Response Message\"] = responseBody.has(\"<ProviderResponseMessage>The operation was completed without errors</ProviderResponseMessage>\");",
									"",
									"",
									"tests[\"PAYTURE Response\"] = responseBody.has(\"<ProviderResponse>SUCCESS</ProviderResponse>\");",
									"",
									"",
									"postman.setEnvironmentVariable('PAYTTimeOutCancelMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4100401111100724</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>08</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "11.2. PAYTURE - TIME_OUT - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1040\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1040\";",
									"",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"tests[\"APC Response Message\"] = responseBody.has(\"<ResponseMessage>Transaction timed out</ResponseMessage>\");",
									"",
									"tests[\"PAYTURE Response Message\"] = responseBody.has(\"<ProviderResponseMessage>Transaction timed out</ProviderResponseMessage>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>CancelPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{PAYTTimeOutCancelMTtxnID}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "12.1. PAYTURE - TIME_OUT - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"tests[\"APC Response Message\"] = responseBody.has(\"<ResponseMessage>Request successful</ResponseMessage>\");",
									"",
									"tests[\"PAYTURE Response Message\"] = responseBody.has(\"<ProviderResponseMessage>The operation was completed without errors</ProviderResponseMessage>\");",
									"",
									"",
									"tests[\"PAYTURE Response\"] = responseBody.has(\"<ProviderResponse>SUCCESS</ProviderResponse>\");",
									"",
									"",
									"postman.setEnvironmentVariable('PAYTTimeOutRefundMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>OneStepPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4100401111103025</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>11</CardExpiryMonth>\n        <CardExpiryYear>2019</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "12.2. PAYTURE - TIME_OUT - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1040\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1040\";",
									"",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"tests[\"APC Response Message\"] = responseBody.has(\"<ResponseMessage>Transaction timed out</ResponseMessage>\");",
									"",
									"tests[\"PAYTURE Response Message\"] = responseBody.has(\"<ProviderResponseMessage>Transaction timed out</ProviderResponseMessage>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>RefundPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{PAYTTimeOutRefundMTtxnID}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "13.1. PAYTURE - AUTH Currency Validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1006\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1006\";",
									"",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"tests[\"Provider Response Message\"] = responseBody.has(\"<ProviderResponseMessage>Merchant not configured for this payment method or currency</ProviderResponseMessage>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111100031</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>08</CardExpiryMonth>\n        <CardExpiryYear>2018</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "14.1. PAYTURE - CAPTURE Currency Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1006\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1006\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"tests[\"Provider Response Message\"] = responseBody.has(\"<ProviderResponseMessage>Merchant not configured for this payment method or currency</ProviderResponseMessage>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>CapturePayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{PAYTURECaptureMTtxnID}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "15.1. PAYTURE - REFUND Currency Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1006\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1006\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"tests[\"Provider Response Message\"] = responseBody.has(\"<ProviderResponseMessage>Merchant not configured for this payment method or currency</ProviderResponseMessage>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							},
							{
								"key": "PASSWORD",
								"value": "123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>RefundPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{PAYTURECaptureMTtxnID}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "16.1. PAYTURE - CANCEL Currency Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1006\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1006\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"tests[\"Provider Response Message\"] = responseBody.has(\"<ProviderResponseMessage>Merchant not configured for this payment method or currency</ProviderResponseMessage>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>CancelPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{PAYTURECancelMTtxnID}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "17.1. PAYTURE - ONESTEP Currency Validation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('transaction_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1006\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1006\";",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"",
									"tests[\"Provider Response Message\"] = responseBody.has(\"<ProviderResponseMessage>Merchant not configured for this payment method or currency</ProviderResponseMessage>\");"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>OneStepPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{transaction_id}}</MerchantTxnID>\n        <Currency>AUD</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4111111111100031</CardNumber>\n        <CardHolder>Ivan Ivanov</CardHolder>\n        <CardExpiryMonth>11</CardExpiryMonth>\n        <CardExpiryYear>2019</CardExpiryYear>\n        <CardCVV>123</CardCVV>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.3. PAYTURE - REFUND",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is PAYTURE\"] = responseBody.has(\"<ProviderName>Payture</ProviderName>\");",
									"tests[\"Response Time is present\"] = responseBody.has(\"</ResponseTimestamp>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							},
							{
								"key": "ServiceUrl",
								"value": "http://sandbox5.payture.com/api/"
							},
							{
								"key": "KEY",
								"value": "Merchant"
							},
							{
								"key": "PASSWORD",
								"value": "123"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>MACQUARIE01</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>RefundPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>payture</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{PAYTURECaptureMTtxnID}}</MerchantTxnID>\n        <Currency>RUB</Currency>\n        <Amount>1000</Amount>\n    </Transaction>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "SCBG",
			"description": "",
			"item": [
				{
					"name": "MasterCard",
					"description": "",
					"item": [
						{
							"name": "1.1 SCBG. AuthPayment (Offline)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('1auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{1auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>334</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "1.2 SCBG. CapturePayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{1auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>  \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "1.3 SCBG. RefundPayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1106\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1106\";",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{1auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "2.1 SCBG. OneStepPayment (Offline)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('2auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n   <Transaction>\r\n        <MerchantTxnID>{{2auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount> \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber>\r\n        <CardHolder>John Doe</CardHolder>\r\n        <CardExpiryMonth>06</CardExpiryMonth>\r\n        <CardExpiryYear>2020</CardExpiryYear>\r\n        <CardCVV>334</CardCVV>\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country>\r\n        <Street1>test</Street1>\r\n        <Street2>Cordoba</Street2>\r\n        <City>test</City>\r\n        <Zip>test</Zip>\r\n    </BillingAddress>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "2.2 SCBG. RefundPayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1106\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1106\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{2auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "3.1 SCBG. AuthPayment (Offline)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('3auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{3auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>334</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "3.2 SCBG. CapturePayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{3auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>      \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "3.3 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{3auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>     \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "4.1 SCBG. AuthPayment (Cancel)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('4auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{4auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>334</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "4.2 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{4auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>     \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "5.1 SCBG. OneStepPayment (THB currency - for Cancel)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('5auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n   <Transaction>\r\n        <MerchantTxnID>{{5auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount> \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber>\r\n        <CardHolder>John Doe</CardHolder>\r\n        <CardExpiryMonth>06</CardExpiryMonth>\r\n        <CardExpiryYear>2020</CardExpiryYear>\r\n        <CardCVV>334</CardCVV>\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country>\r\n        <Street1>test</Street1>\r\n        <Street2>Cordoba</Street2>\r\n        <City>test</City>\r\n        <Zip>test</Zip>\r\n    </BillingAddress>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "5.2 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"postman.setEnvironmentVariable('SCBGCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{5auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount>     \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "5.3 SCBG. PaymentStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1089\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1089\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>PaymentStatus</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{5auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "6.1 SCBG. AuthPayment (USD Currency)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"",
											"postman.setEnvironmentVariable('6auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{6auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber>\r\n        <CardHolder>Carlos Pellegrino</CardHolder>\r\n        <CardExpiryMonth>06</CardExpiryMonth>\r\n        <CardExpiryYear>2020</CardExpiryYear>\r\n        <CardCVV>334</CardCVV>\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "6.2 SCBG. CapturePayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{6auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>      \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "6.3 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{6auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>     \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "7.1 SCBG. OneStepPayment (AUD Currency)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"",
											"postman.setEnvironmentVariable('7auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n   <Transaction>\r\n        <MerchantTxnID>{{7auth_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount> \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber>\r\n        <CardHolder>John Doe</CardHolder>\r\n        <CardExpiryMonth>06</CardExpiryMonth>\r\n        <CardExpiryYear>2020</CardExpiryYear>\r\n        <CardCVV>334</CardCVV>\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country>\r\n        <Street1>test</Street1>\r\n        <Street2>Cordoba</Street2>\r\n        <City>test</City>\r\n        <Zip>test</Zip>\r\n    </BillingAddress>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "7.2 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"postman.setEnvironmentVariable('SCBGCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{7auth_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>     \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "8.1 SCBG. AuthPayment (USD currency)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('8auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{8auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>334</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "8.2 SCBG. PaymentStatus (USD currency)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>PaymentStatus</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{8auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount> \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "9.1 SCBG. OneStepPayment (without TerminalId)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('9auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1076\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1076\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>Amadeus</UserID>\r\n        <MerchantID>JuanTMerch</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{9auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <!--<TerminalID>627116676</TerminalID>-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>334</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "10.1 SCBG. OneStepPayment (PaymentTerm - campaignCode)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('10auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{10auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>334</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n        <Installment>\r\n          <PayNumberMonths>02</PayNumberMonths> <!--paymentTerm-->\r\n          <InstallmentId>05</InstallmentId> <!--campaignCode-->\r\n    </Installment>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "11.1 SCBG. PaymentStatus (Currency missing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('11auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Missing required field: Currency\"] = responseBody.has(\"<ProviderResponseMessage>Missing required field: Currency</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>PaymentStatus</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{11auth_txn_id}}</MerchantTxnID>\r\n        <Currency></Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "12.1 SCBG. AuthPayment (Currency invalid=VEF)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('12auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1031\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1031\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is invalid currency\"] = responseBody.has(\"<ProviderResponseMessage>invalid currency</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{12auth_txn_id}}</MerchantTxnID>\r\n        <Currency>VEF</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>334</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "13.1 SCBG. AuthPayment (invalid CardNumber)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('13auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1001\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1001\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is creditcard number is invalid\"] = responseBody.has(\"<ProviderResponseMessage>creditcard number is invalid</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{13auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4111111111111111</CardNumber> \r\n        <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2018</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>123</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n\t<Customer>\r\n    \t<EmailAdress>test</EmailAdress>\r\n    </Customer>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "14.1 SCBG. AuthPayment (Long Amount)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('14auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is amount is required\"] = responseBody.has(\"<ProviderResponseMessage>amount is required</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{14auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency> <!--A(3)-->\r\n        <Amount>1009990000000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>334</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "15.1 SCBG. AuthPayment (Currency missing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('15auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is Missing required field: Currency\"] = responseBody.has(\"<ProviderResponseMessage>Missing required field: Currency</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{15auth_txn_id}}</MerchantTxnID>\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>334</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "16.1 SCBG. AuthPayment (CardHolder missing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('16auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is Missing required field: CardHolder\"] = responseBody.has(\"<ProviderResponseMessage>Missing required field: CardHolder</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{16auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder></CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>334</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "17.1 SCBG. AuthPayment (EUR currency - without BillingAddress)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('17auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider Name is Missing required field: BillingAddress\"] = responseBody.has(\"<ProviderResponseMessage>Missing required field: BillingAddress</ProviderResponseMessage>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{17auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>334</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "18.1 SCBG. AuthPayment (EUR currency - invalid CVV)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('18auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1004\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1004\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is Host Reject\"] = responseBody.has(\"<ProviderResponseMessage>Host Reject</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{18auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>999</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n\t<BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "19.1 SCBG. AuthPayment (PaymentTerm - campaignCode)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('19auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>SCBTest001</UserID>\n        <MerchantID>ScbGatewayTest</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{19auth_txn_id}}</MerchantTxnID>\n        <Currency>THB</Currency>\n        <Amount>10000</Amount>\n        <TerminalID>627116676</TerminalID>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>5404920199980103</CardNumber> <!--A(20)-->\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\n        <CardExpiryYear>2020</CardExpiryYear> <!--A(4)-->\n        <CardCVV>334</CardCVV> <!--A(3)-->\n    </CardDetails>\n    <BillingAddress>\n        <Country>TH</Country>\n        <Street1>test</Street1>\n        <Street2>test</Street2>\n        <City>test</City>\n        <Zip>test</Zip>\n    </BillingAddress>\n        <Installment>\n          <PayNumberMonths>02</PayNumberMonths> <!--paymentTerm-->\n          <InstallmentId>05</InstallmentId> <!--campaignCode-->\n    </Installment>\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Visa",
					"description": "",
					"item": [
						{
							"name": "1.1 SCBG. AuthPayment (Offline)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('1auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{1auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "1.2 SCBG. CapturePayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{1auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>  \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "1.3 SCBG. RefundPayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1106\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1106\";",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{1auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "2.1 SCBG. OneStepPayment (Offline)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('2auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n   <Transaction>\r\n        <MerchantTxnID>{{2auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount> \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n       <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country>\r\n        <Street1>test</Street1>\r\n        <Street2>Cordoba</Street2>\r\n        <City>test</City>\r\n        <Zip>test</Zip>\r\n    </BillingAddress>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "2.2 SCBG. RefundPayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1106\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1106\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{2auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "3.1 SCBG. AuthPayment (Offline)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('3auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{3auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "3.2 SCBG. CapturePayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{3auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>      \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "3.3 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{3auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>     \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "4.1 SCBG. AuthPayment (Cancel)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('4auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{4auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "4.2 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{4auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>     \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "5.1 SCBG. OneStepPayment (THB currency - for Cancel)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('5auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n   <Transaction>\r\n        <MerchantTxnID>{{5auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount> \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country>\r\n        <Street1>test</Street1>\r\n        <Street2>Cordoba</Street2>\r\n        <City>test</City>\r\n        <Zip>test</Zip>\r\n    </BillingAddress>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "5.2 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"postman.setEnvironmentVariable('SCBGCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{5auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount>     \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "5.3 SCBG. PaymentStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1089\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1089\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>PaymentStatus</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{5auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "6.1 SCBG. AuthPayment (USD Currency)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"",
											"postman.setEnvironmentVariable('6auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{6auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "6.2 SCBG. CapturePayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{6auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>      \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "6.3 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{6auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>     \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "7.1 SCBG. OneStepPayment (AUD Currency)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"",
											"postman.setEnvironmentVariable('7auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n   <Transaction>\r\n        <MerchantTxnID>{{7auth_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount> \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country>\r\n        <Street1>test</Street1>\r\n        <Street2>Cordoba</Street2>\r\n        <City>test</City>\r\n        <Zip>test</Zip>\r\n    </BillingAddress>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "7.2 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"postman.setEnvironmentVariable('SCBGCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{7auth_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>     \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "8.1 SCBG. AuthPayment (USD currency)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('8auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{8auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "8.2 SCBG. PaymentStatus (USD currency)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>PaymentStatus</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{8auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount> \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "9.1 SCBG. OneStepPayment (without TerminalId)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('9auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1050\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1050\";",
											"tests[\"Provider Name is Invalid authentication for request\"] = responseBody.has(\"Invalid authentication for request\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>Amadeus</UserID>\r\n        <MerchantID>JuanTMerch</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{9auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <!--<TerminalID>627116676</TerminalID>-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "10.1 SCBG. OneStepPayment (PaymentTerm - campaignCode)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('10auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{10auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n        <Installment>\r\n          <PayNumberMonths>02</PayNumberMonths> <!--paymentTerm-->\r\n          <InstallmentId>05</InstallmentId> <!--campaignCode-->\r\n    </Installment>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "11.1 SCBG. PaymentStatus (Currency missing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('11auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Missing required field: Currency\"] = responseBody.has(\"<ProviderResponseMessage>Missing required field: Currency</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>PaymentStatus</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{11auth_txn_id}}</MerchantTxnID>\r\n        <Currency></Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "12.1 SCBG. AuthPayment (Currency invalid=VEF)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('12auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1031\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1031\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is invalid currency\"] = responseBody.has(\"<ProviderResponseMessage>invalid currency</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{12auth_txn_id}}</MerchantTxnID>\r\n        <Currency>VEF</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "13.1 SCBG. AuthPayment (invalid CardNumber)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('13auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1001\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1001\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is creditcard number is invalid\"] = responseBody.has(\"<ProviderResponseMessage>creditcard number is invalid</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{13auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4111111111111111</CardNumber> \r\n        <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2018</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>123</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n\t<Customer>\r\n    \t<EmailAdress>test</EmailAdress>\r\n    </Customer>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "14.1 SCBG. AuthPayment (Long Amount)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('14auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1044\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1044\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is Invalid amount format\"] = responseBody.has(\"<ProviderResponseMessage>Invalid amount format</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{14auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency> <!--A(3)-->\r\n        <Amount>1009990000000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "15.1 SCBG. AuthPayment (Currency missing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('15auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Eesponse is Missing required field: Currency\"] = responseBody.has(\"Missing required field: Currency\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{15auth_txn_id}}</MerchantTxnID>\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "16.1 SCBG. AuthPayment (CardHolder missing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('16auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is Missing required field: CardHolder\"] = responseBody.has(\"<ProviderResponseMessage>Missing required field: CardHolder</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{16auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder></CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "17.1 SCBG. AuthPayment (EUR currency - without BillingAddress)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('17auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider Name is Missing required field: BillingAddress\"] = responseBody.has(\"<ProviderResponseMessage>Missing required field: BillingAddress</ProviderResponseMessage>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{17auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "18.1 SCBG. AuthPayment (EUR currency - invalid CVV)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('18auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1004\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1004\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is Host Reject\"] = responseBody.has(\"<ProviderResponseMessage>Host Reject</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{18auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>999</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n\t<BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "19.1 SCBG. AuthPayment (PaymentTerm - campaignCode)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('19auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>SCBTest001</UserID>\n        <MerchantID>ScbGatewayTest</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{19auth_txn_id}}</MerchantTxnID>\n        <Currency>THB</Currency>\n        <Amount>10000</Amount>\n        <TerminalID>627116676</TerminalID>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4966151099990231</CardNumber> <!--A(20)-->\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\n        <CardCVV>021</CardCVV> <!--A(3)-->\n    </CardDetails>\n    <BillingAddress>\n        <Country>TH</Country>\n        <Street1>test</Street1>\n        <Street2>test</Street2>\n        <City>test</City>\n        <Zip>test</Zip>\n    </BillingAddress>\n        <Installment>\n          <PayNumberMonths>02</PayNumberMonths> <!--paymentTerm-->\n          <InstallmentId>05</InstallmentId> <!--campaignCode-->\n    </Installment>\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "JCB",
					"description": "",
					"item": [
						{
							"name": "1.1 SCBG. AuthPayment (Offline)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('1auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{1auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "1.2 SCBG. CapturePayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{1auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>  \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "1.3 SCBG. RefundPayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1106\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1106\";",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{1auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "2.1 SCBG. OneStepPayment (Offline)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('2auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n   <Transaction>\r\n        <MerchantTxnID>{{2auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount> \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n       <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country>\r\n        <Street1>test</Street1>\r\n        <Street2>Cordoba</Street2>\r\n        <City>test</City>\r\n        <Zip>test</Zip>\r\n    </BillingAddress>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "2.2 SCBG. RefundPayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1106\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1106\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{2auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "3.1 SCBG. AuthPayment (Offline)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('3auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{3auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "3.2 SCBG. CapturePayment (Offline)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{3auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>      \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "3.3 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{3auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>     \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "4.1 SCBG. AuthPayment (Cancel)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('4auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{4auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "4.2 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{4auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>     \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "5.1 SCBG. OneStepPayment (THB currency - for Cancel)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('5auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n   <Transaction>\r\n        <MerchantTxnID>{{5auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount> \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country>\r\n        <Street1>test</Street1>\r\n        <Street2>Cordoba</Street2>\r\n        <City>test</City>\r\n        <Zip>test</Zip>\r\n    </BillingAddress>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "5.2 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"postman.setEnvironmentVariable('SCBGCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{5auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency>\r\n        <Amount>10000</Amount>     \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "5.3 SCBG. PaymentStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1089\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1089\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>PaymentStatus</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{5auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "6.1 SCBG. AuthPayment (USD Currency)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"",
											"postman.setEnvironmentVariable('6auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{6auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "6.2 SCBG. CapturePayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{6auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>      \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "6.3 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{6auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>     \r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "7.1 SCBG. OneStepPayment (AUD Currency)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"",
											"postman.setEnvironmentVariable('7auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n   <Transaction>\r\n        <MerchantTxnID>{{7auth_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount> \r\n        <TerminalID>627116676</TerminalID>\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country>\r\n        <Street1>test</Street1>\r\n        <Street2>Cordoba</Street2>\r\n        <City>test</City>\r\n        <Zip>test</Zip>\r\n    </BillingAddress>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "7.2 SCBG. CancelPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"postman.setEnvironmentVariable('SCBGCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{7auth_txn_id}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>     \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "8.1 SCBG. AuthPayment (USD currency)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('8auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{8auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "8.2 SCBG. PaymentStatus (USD currency)",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>PaymentStatus</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{8auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount> \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "9.1 SCBG. OneStepPayment (without TerminalId)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('9auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1076\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1076\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>Amadeus</UserID>\r\n        <MerchantID>JuanTMerch</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{9auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <!--<TerminalID>627116676</TerminalID>-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "10.1 SCBG. OneStepPayment (PaymentTerm - campaignCode)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('10auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{10auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n        <Installment>\r\n          <PayNumberMonths>02</PayNumberMonths> <!--paymentTerm-->\r\n          <InstallmentId>05</InstallmentId> <!--campaignCode-->\r\n    </Installment>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "11.1 SCBG. PaymentStatus (Currency missing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('11auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Missing required field: Currency\"] = responseBody.has(\"<ProviderResponseMessage>Missing required field: Currency</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>PaymentStatus</TransactionType>\r\n        <Version>2</Version>\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{11auth_txn_id}}</MerchantTxnID>\r\n        <Currency></Currency>\r\n        <Amount>10000</Amount>      \r\n    </Transaction>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "12.1 SCBG. AuthPayment (Currency invalid=VEF)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('12auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1031\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1031\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is invalid currency\"] = responseBody.has(\"<ProviderResponseMessage>invalid currency</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{12auth_txn_id}}</MerchantTxnID>\r\n        <Currency>VEF</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "13.1 SCBG. AuthPayment (invalid CardNumber)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('13auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1001\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1001\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is creditcard number is invalid\"] = responseBody.has(\"<ProviderResponseMessage>creditcard number is invalid</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{13auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>4111111111111111</CardNumber> \r\n        <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>06</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2018</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>123</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n\t<Customer>\r\n    \t<EmailAdress>test</EmailAdress>\r\n    </Customer>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "14.1 SCBG. AuthPayment (Long Amount)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('14auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1044\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1044\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is Invalid amount format\"] = responseBody.has(\"<ProviderResponseMessage>Invalid amount format</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{14auth_txn_id}}</MerchantTxnID>\r\n        <Currency>THB</Currency> <!--A(3)-->\r\n        <Amount>1009990000000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "15.1 SCBG. AuthPayment (Currency missing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('15auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Eesponse is Missing required field: Currency\"] = responseBody.has(\"Missing required field: Currency\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{15auth_txn_id}}</MerchantTxnID>\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "16.1 SCBG. AuthPayment (CardHolder missing)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('16auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is Missing required field: CardHolder\"] = responseBody.has(\"<ProviderResponseMessage>Missing required field: CardHolder</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{16auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder></CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "17.1 SCBG. AuthPayment (EUR currency - without BillingAddress)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('17auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1047\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1047\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider Name is Missing required field: BillingAddress\"] = responseBody.has(\"<ProviderResponseMessage>Missing required field: BillingAddress</ProviderResponseMessage>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{17auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>021</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "18.1 SCBG. AuthPayment (EUR currency - invalid CVV)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('18auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1004\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1004\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											"tests[\"Provider response is Host Reject\"] = responseBody.has(\"<ProviderResponseMessage>Host Reject</ProviderResponseMessage>\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SCBTest001</UserID>\r\n        <MerchantID>ScbGatewayTest</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version> <!--A(10)-->\r\n    </Header>\r\n    <Transaction>\r\n        <MerchantTxnID>{{18auth_txn_id}}</MerchantTxnID>\r\n        <Currency>EUR</Currency> <!--A(3)-->\r\n        <Amount>10000</Amount> <!--N(10)-->\r\n        <TerminalID>627116676</TerminalID> <!--Int-->\r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\r\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\r\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\r\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\r\n        <CardCVV>999</CardCVV> <!--A(3)-->\r\n    </CardDetails>\r\n\t<BillingAddress>\r\n        <Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>Colon 123</Street1> <!--A(80)-->\r\n    \t<Street2>Avenida Test 001</Street2> <!--A(80)-->\r\n    \t<City>New York</City> <!--A(60)-->\r\n    \t<State>NY</State> <!--A(60)-->\r\n    \t<Zip>10001</Zip> <!--A(10)-->\r\n    </BillingAddress>\r\n    <ShippingAddress>\r\n    \t<CustomerName>Belgrano</CustomerName> <!--A(80)-->\r\n    \t<Custom1>Carlos</Custom1> <!--A(20)-->\r\n    \t<Custom2>Pellegrino</Custom2> <!--A(60)-->\r\n    \t<Country>TH</Country> <!--A(2)-->\r\n    \t<Street1>test</Street1> <!--A(80)-->\r\n    \t<Street2>test</Street2> <!--A(80)-->\r\n    \t<City>test</City> <!--A(60)-->\r\n    \t<State>test</State> <!--A(60)-->\r\n    \t<Zip>test</Zip> <!--A(10)-->\r\n    \t<ShippingPhone></ShippingPhone> <!--A(30)-->\r\n    </ShippingAddress>\r\n    <Item>\r\n    \t<ItemDescription>test</ItemDescription> <!--A(100)-->\r\n    </Item>\r\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "19.1 SCBG. AuthPayment (PaymentTerm - campaignCode)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('19auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>SCBTest001</UserID>\n        <MerchantID>ScbGatewayTest</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{19auth_txn_id}}</MerchantTxnID>\n        <Currency>THB</Currency>\n        <Amount>10000</Amount>\n        <TerminalID>627116676</TerminalID>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>3569990010059557</CardNumber> <!--A(20)-->\n        <CardHolder>Carlos Pellegrino</CardHolder> <!--A(80)-->\n        <CardExpiryMonth>07</CardExpiryMonth> <!--A(2)-->\n        <CardExpiryYear>2019</CardExpiryYear> <!--A(4)-->\n        <CardCVV>021</CardCVV> <!--A(3)-->\n    </CardDetails>\n    <BillingAddress>\n        <Country>TH</Country>\n        <Street1>test</Street1>\n        <Street2>test</Street2>\n        <City>test</City>\n        <Zip>test</Zip>\n    </BillingAddress>\n        <Installment>\n          <PayNumberMonths>02</PayNumberMonths> <!--paymentTerm-->\n          <InstallmentId>05</InstallmentId> <!--campaignCode-->\n    </Installment>\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "Sofort",
			"description": "",
			"item": [
				{
					"name": "1.1. Sofort - OnlinePayment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
									"postman.setEnvironmentVariable('Sofort_mtxnid',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n   <Header>\r\n       <UserID>QAUserID</UserID>\r\n       <MerchantID>QAT001</MerchantID>\r\n       <TransactionType>OnlinePayment</TransactionType>\r\n       <Version>2</Version>\r\n       <Custom1>sofort</Custom1>\r\n   </Header>\r\n   <Transaction>\r\n       <MerchantTxnID>{{Sofort_mtxnid}}</MerchantTxnID>\r\n       <Currency>EUR</Currency>\r\n       <Amount>2000</Amount>\r\n       <Method>SB</Method>\r\n   </Transaction>\r\n   <SoftDescriptor>\r\n       <MerchantDescriptor>TEST DESCRIPTION</MerchantDescriptor>\r\n   </SoftDescriptor>\r\n   <BankDetails>\r\n       <AccountHolder>TEST SR</AccountHolder>\r\n       <BankCode>SFRTDE20XXX</BankCode>\r\n       <AccountNumber>DE25000000000000112233</AccountNumber>\r\n       <BankCountry></BankCountry>\r\n   </BankDetails>\r\n   <RedirectInfo>\r\n       <SuccessURL>https://www.example.com/payment/success.php</SuccessURL>\r\n       <CancelURL>https://www.example.com/payment/abort.php</CancelURL>\r\n   </RedirectInfo>\r\n</TransactionRequest>\r\n"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. Sofort - PaymentStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
									"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n   <Header>\r\n       <UserID>QAUserID</UserID>\r\n       <MerchantID>QAT001</MerchantID>\r\n       <TransactionType>PaymentStatus</TransactionType>\r\n       <Version>2</Version>\r\n       <Custom1>sofort</Custom1>\r\n   </Header>\r\n   <Transaction>\r\n       <MerchantTxnID>{{Sofort_mtxnid}}</MerchantTxnID>\r\n       <Method>SB</Method>\r\n   </Transaction>\r\n</TransactionRequest>\r\n"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Trusly",
			"description": "",
			"item": [
				{
					"name": "1. OnlinePayment - end2end",
					"description": "",
					"item": [
						{
							"name": "1.1. Trusly - OnlinePayment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('Trusly_mtxnid',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<TransactionRequest>\n    <Header>\n        <UserID>QAUserID</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>OnlinePayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>trusly</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{Trusly_mtxnid}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>450000</Amount>\n        <ChannelType>07</ChannelType>\n        <Method>TR</Method>\n    </Transaction>\n    <Customer>\n        <EmailAddress>yanis@yanis.com</EmailAddress>\n        <CustomerID>yanisyanis</CustomerID>\n    </Customer>\n    <BillingAddress>\n        <CustomerFirstName>yanis</CustomerFirstName>\n        <CustomerLastName>yanis</CustomerLastName>\n        <Street1>yansi</Street1>\n        <City>SOFIA</City>\n        <Zip>1234</Zip>\n        <Country>BG</Country>\n    </BillingAddress>\n    <SoftDescriptor>\n        <MerchantDescriptor>test                     </MerchantDescriptor>\n    </SoftDescriptor>\n    <RedirectInfo>\n        <SuccessURL>https://example.com/return_success_url</SuccessURL>\n        <CancelURL>https://example.com/return_failure_url</CancelURL>\n    </RedirectInfo>\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "1.2. Trusly - Refund",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<TransactionRequest>\n    <Header>\n        <UserID>QAUserID</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>RefundPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>trusly</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{Trusly_mtxnid}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>450000</Amount>\n        <Method>TR</Method>\n    </Transaction>\n    <CardDetails/>\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "2. CreditPayment - end2end",
					"description": "",
					"item": [
						{
							"name": "2.1. Trusly - CreditPayment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' +  minutes + '' + seconds;",
											"postman.setEnvironmentVariable('Trusly2_mtxnid',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>QAUserID</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>CreditPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>trusly</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{Trusly2_mtxnid}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>2000</Amount>\n        <ChannelType>07</ChannelType>\n        <Method>TR</Method>\n    </Transaction>\n    <Customer>\n        <EmailAddress>john@example.com</EmailAddress>\n        <TelNo>555555</TelNo>\n        <CustomerID>PlamenPetrov</CustomerID>\n        <DateofBirth>24041988</DateofBirth>\n    </Customer>\n    <BillingAddress>\n        <CustomerFirstName>Plamen</CustomerFirstName>\n        <CustomerLastName>Petrov</CustomerLastName>\n        <Street1>Berlin</Street1>\n        <City>Berlin</City>\n        <Zip>M4B1B3</Zip>\n        <Country>DE</Country>\n    </BillingAddress>\n    <SoftDescriptor>\n        <MerchantDescriptor>test                     </MerchantDescriptor>\n    </SoftDescriptor>\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "2.2. Trusly - Refund",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1042\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1042\";",
											"tests[\"Provider Name is SCB-Gateway\"] = responseBody.has(\"<ProviderName>SCB-Gateway</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<TransactionRequest>\n    <Header>\n        <UserID>QAUserID</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>RefundPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>trusly</Custom1>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>{{Trusly2_mtxnid}}</MerchantTxnID>\n        <Currency>EUR</Currency>\n        <Amount>450000</Amount>\n        <Method>TR</Method>\n    </Transaction>\n    <CardDetails/>\n</TransactionRequest>"
								},
								"url": {
									"raw": "{{endpoint}}",
									"host": [
										"{{endpoint}}"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "SecurePay",
			"description": "",
			"item": [
				{
					"name": "1.1. SecurePay - AUTH (capture, refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is SecurePay\"] = responseBody.has(\"<ProviderName>SecurePay</ProviderName>\");",
									"postman.setEnvironmentVariable('SPAYCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>SecurePay001</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>spay</Custom1>\n    </Header>\n    <Transaction>\n        <TerminalID>GEN00001</TerminalID>\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n        <Currency>USD</Currency>\n        <Amount>000</Amount>\n        <ChannelType>07</ChannelType>\n        <Method>CC</Method>\n        <POnumber>12341</POnumber>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4564610000000170</CardNumber>\n        <CardHolder>Jon Smith</CardHolder>\n       <CardExpiryMonth>12</CardExpiryMonth>\n        <CardExpiryYear>2017</CardExpiryYear>\n        <CardType>VISA</CardType>\n        <BIN>444433</BIN>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. SecurePay - CAPTURE (refund) ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is SecurePay\"] = responseBody.has(\"<ProviderName>SecurePay</ProviderName>\");",
									"postman.setEnvironmentVariable('SPAYRefundMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>SecurePay001</UserID>\n        <MerchantID>QAT001</MerchantID>\n        <TransactionType>CapturePayment</TransactionType>\n        <Version>2</Version>\n        <Custom1>spay</Custom1>\n    </Header>\n    <Transaction>\n        <TerminalID>GEN00001</TerminalID>\n        <MerchantTxnID>{{SPAYCaptureMTtxnID}}</MerchantTxnID>\n        <Currency></Currency>\n        <Amount>100000</Amount>\n        <ChannelType>07</ChannelType>\n        <Method>CC</Method>\n        <POnumber>12341</POnumber>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4564610000000170</CardNumber>\n        <CardHolder>Jon Smith</CardHolder>\n       <CardExpiryMonth>12</CardExpiryMonth>\n        <CardExpiryYear>2017</CardExpiryYear>\n        <CardType>VISA</CardType>\n        <BIN>444433</BIN>\n    </CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.3. SecurePay - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is SecurePay\"] = responseBody.has(\"<ProviderName>SecurePay</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SecurePay001</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>spay</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{SPAYRefundMTtxnID}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>   \r\n        <POnumber>12341</POnumber>\r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1 SecurePay - ONESTEP",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is SecurePay\"] = responseBody.has(\"<ProviderName>SecurePay</ProviderName>\");",
									"postman.setEnvironmentVariable('SPAYRefundOneStepMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>SecurePay001</UserID>\n        <MerchantID>QAT001</MerchantID>\n    \t<TransactionType>OneStepPayment</TransactionType>\n    \t<Custom1>spay</Custom1>\n    \t<Version>2</Version>\n\t</Header>\n\t<Transaction>\n    \t<MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\n    \t<Currency>AUD</Currency>\n    \t<Amount>100000</Amount>\n    \t<ChannelType>02</ChannelType>\n    \t<POnumber>12341</POnumber>\n\t</Transaction>\n\t<CardDetails>\n    \t<CardNumber>4111111111111111</CardNumber>\n    \t<CardHolder>Jon Smith</CardHolder>\n    \t<CardExpiryMonth>08</CardExpiryMonth>\n    \t<CardExpiryYear>2020</CardExpiryYear>\n    \t<CardCVV>123</CardCVV>\n\t</CardDetails>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.3. SecurePay - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is SecurePay\"] = responseBody.has(\"<ProviderName>SecurePay</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>SecurePay001</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>spay</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{SPAYRefundOneStepMTtxnID}}</MerchantTxnID>\r\n        <Currency>AUD</Currency>\r\n        <Amount>100000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>   \r\n        <POnumber>12341</POnumber>\r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "WestPac",
			"description": "",
			"item": [
				{
					"name": "1.1 WestPac - AUTH (capture, refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
									"postman.setEnvironmentVariable('WESTPACCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>MACQUARIE01</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>westpac</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>1000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. Westpac - CAPTURE (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
									"postman.setEnvironmentVariable('WESTPACRefundMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>westpac</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{WESTPACCaptureMTtxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.3. Westpac - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
									"postman.setEnvironmentVariable('WESTPACCancelMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>westpac</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{WESTPACRefundMTtxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.4. Westpac - CANCEL (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>westpac</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{WESTPACCancelMTxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1. WestPac - AUTH (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
									"postman.setEnvironmentVariable('WESTPACCancelMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>westpac</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2. Westpac - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>westpac</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{WESTPACCancelMTxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.1. Westpac - ONESTEP  (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
									"postman.setEnvironmentVariable('WESTPACRefundOneStepMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>westpac</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.2. Westpac - REFUND (onestep)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
									"postman.setEnvironmentVariable('WESTPACCancelMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>westpac</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{WESTPACRefundOneStepMTtxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.3. Westpac - CANCEL REFUND (onestep)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>westpac</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{WESTPACCancelMTxnID}}</MerchantTxnID>        \r\n        <Currency>AUD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "WireCard",
			"description": "",
			"item": [
				{
					"name": "1.1. WireCard - AUTH (capture, refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									"postman.setEnvironmentVariable('WireCardCaptureMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>wirecard</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. WireCard - CAPTURE (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									"postman.setEnvironmentVariable('WireCardRefundMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CapturePayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>wirecard</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{WireCardCaptureMTxnID}}</MerchantTxnID>        \r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.3. WireCard - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>wirecard</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{WireCardRefundMTxnID}}</MerchantTxnID>        \r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1. WireCard - AUTH (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									"postman.setEnvironmentVariable('WireCardCancelMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>AuthPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>wirecard</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.2. WireCard - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>CancelPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>wirecard</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{WireCardCancelMTxnID}}</MerchantTxnID>        \r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.1. WireCard - ONESTEP  (refund)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									"postman.setEnvironmentVariable('WireCardRefundOneStepMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>OneStepPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>wirecard</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <CardDetails>\r\n        <CardNumber>5555555555554444</CardNumber>\r\n        <CardHolder>Test</CardHolder>\r\n        <CardExpiryMonth>11</CardExpiryMonth>\r\n        <CardExpiryYear>2019</CardExpiryYear>\r\n        <CardCVV>123</CardCVV>\r\n    </CardDetails>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.2. WireCard - REFUND (onestep)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n    <Header>\r\n        <UserID>QAUserID</UserID>\r\n        <MerchantID>QAT001</MerchantID>\r\n        <TransactionType>RefundPayment</TransactionType>\r\n        <Version>2</Version>\r\n        <Custom1>wirecard</Custom1>\r\n    </Header>\r\n    <Transaction>\r\n        <TerminalID>GEN00001</TerminalID>\r\n        <MerchantTxnID>{{WireCardRefundOneStepMTtxnID}}</MerchantTxnID>        \r\n        <Currency>USD</Currency>\r\n        <Amount>10000</Amount>\r\n        <ChannelType>07</ChannelType>\r\n        <Method>CC</Method>        \r\n    </Transaction>\r\n    <SoftDescriptor>\r\n        <MerchantDescriptor>MerchantDescriptor</MerchantDescriptor>\r\n    </SoftDescriptor>\r\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "Inicis",
			"description": "",
			"item": [
				{
					"name": "1.1. INICIS - OnlinePayment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									"postman.setEnvironmentVariable('WireCardCaptureMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n<TransactionRequest>\r\n\t<Header>\r\n\t\t<UserID>HIS00001</UserID>\r\n\t\t<MerchantID>InicisTest</MerchantID>\r\n\t\t<TransactionType>OnlinePayment</TransactionType>\r\n\t\t<Version>2</Version>\r\n\t</Header>\r\n\t<Transaction>\r\n\t\t<MerchantTxnID>{{auth_txn_id}}</MerchantTxnID>\r\n \t\t<Currency>KRW</Currency>\r\n\t\t<Amount>137753000</Amount>\r\n \t\t<ChannelType>07</ChannelType>\r\n\t\t<Method>IC</Method>\r\n\t\t<TxnDetails>TxnDetails</TxnDetails>\r\n\t</Transaction>\r\n\t<Customer>\r\n\t\t<EmailAddress>kishishita.shinya@his-world.com</EmailAddress>\r\n\t\t<IPAddress>61.114.22.21</IPAddress>\r\n\t\t<TelNo>0312345678</TelNo>\r\n\t\t<SessionID>6ed96150-1d50-49fb-9940-a36e945018ca</SessionID>\r\n\t</Customer>\r\n\t<BillingAddress>\r\n\t\t<CustomerName>TEST TARO</CustomerName>\r\n\t\t<Company/>\r\n\t\t<Street1/>\r\n\t\t<Street2/>\r\n\t\t<City/>\r\n\t\t<Zip/>\r\n\t\t<State/>\r\n\t\t<Country>KR</Country>\r\n\t</BillingAddress>\r\n\t<RedirectInfo>\r\n\t\t<SuccessURL>https://202.68.215.239/kr/Contents/Payment/PaymentConfirmation.aspx?PaymentType=Inicis&amp;VpcTransactionNo=KRA115040615081/0</SuccessURL>\r\n\t\t<CancelURL>https://202.68.215.239/kr/Contents/Payment/PaymentConfirmation.aspx?PaymentType=Inicis&amp;VpcTransactionNo=KRA115040615081/0</CancelURL>\r\n\t</RedirectInfo>\r\n\t<Item>\r\n\t\t<ItemCode>Travel</ItemCode>\r\n\t</Item>\r\n</TransactionRequest>\r\n"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "1.2. INICIS - CANCEL",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									"postman.setEnvironmentVariable('WireCardRefundMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<TransactionRequest>\r\n   <Header>\r\n       <UserID>HIS00001</UserID>\r\n       <MerchantID>InicisTest</MerchantID>\r\n       <TransactionType>CancelPayment</TransactionType>\r\n       <Version>2</Version>\r\n   </Header>\r\n   <Transaction>\r\n       <MerchantTxnID>20179281053</MerchantTxnID>\r\n       <Currency>KRW</Currency>\r\n       <Amount>1000000</Amount>\r\n       <ChannelType>07</ChannelType>\r\n       <Method>CC</Method>\r\n       <TxnDetails>TxnDetails1</TxnDetails>\r\n       <RefundReason>Test Refund</RefundReason>\r\n       <DiscountSaving></DiscountSaving>\r\n       <CancelReason>Test Cancel</CancelReason>\r\n   </Transaction>\r\n   <Customer>\r\n       <EmailAddress>yateshc@chetu.com</EmailAddress>\r\n       <IPAddress>127.0.0.1</IPAddress>\r\n       <TelNo>211111111111111111</TelNo>\r\n       <SessionID></SessionID>\r\n   </Customer>\r\n   <BillingAddress>\r\n       <CustomerName>ISHIMARU KEIICHI</CustomerName>\r\n   </BillingAddress>\r\n   <RedirectInfo>\r\n       <SuccessURL>https://paypage.apcld.net/MerchantSite/bankResponse</SuccessURL>\r\n       <CancelURL>https://paypage.apcld.net/MerchantSite/bankResponse</CancelURL>\r\n   </RedirectInfo>\r\n   <Wallet>\r\n       <WalletID>INIpayTest_E35E9A2CF8E8373C90A94E5230BB0</WalletID>\r\n   </Wallet>\r\n   <Item>\r\n       <ItemCode>Book</ItemCode>\r\n   </Item>\r\n</TransactionRequest>\r\n"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1. INICIS - AUTH (cancel) PROD",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									"postman.setEnvironmentVariable('WireCardCancelMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>HIS00001</UserID>\n        <MerchantID>InicisTest</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>DZtest00{{auth_txn_id}}</MerchantTxnID>\n        <Currency>KRW</Currency>\n        <Amount>1000000</Amount>\n        <ChannelType>07</ChannelType>\n        <Method>IC</Method>\n        <TxnDetails>TxnDetails</TxnDetails>\n    </Transaction>\n    <Wallet>\n        <WalletID>hiskorea00_96F18D23587705A8853590D5A71E5</WalletID>\n    </Wallet>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "3.2. INICIS - REFUND",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = year + '' + month  + '' + day + '' + minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<TransactionRequest>\r\n   <Header>\r\n       <UserID>HIS00001</UserID>\r\n       <MerchantID>jYZFDU37929418333201</MerchantID>\r\n       <TransactionType>refundPayment</TransactionType>\r\n       <Version>2</Version>\r\n   </Header>\r\n   <Transaction>\r\n       <MerchantTxnID>ok34344242</MerchantTxnID>\r\n       <PaymentID>100257630</PaymentID>\r\n       <Currency>KRW</Currency>\r\n       <Amount>1000000</Amount>\r\n       <TransactionTimestamp>09032015174804</TransactionTimestamp>\r\n       <ChannelType>07</ChannelType>\r\n       <Method>CC</Method>\r\n       <TxnDetails>TxnDetails1</TxnDetails>\r\n   </Transaction>\r\n   <Customer>\r\n       <EmailAddress>ishimaru@dcom-web.co.jp</EmailAddress>\r\n       <IPAddress>127.0.0.1</IPAddress>\r\n       <TelNo>91801020198218</TelNo>\r\n       <SessionID>d79a8ac8-7265-43e2-a6dd-0a3a1254dabe</SessionID>\r\n   </Customer>\r\n   <BillingAddress>\r\n       <CustomerName>ISHIMARU KEIICHI</CustomerName>\r\n       <Company></Company>\r\n       <Street1></Street1>\r\n       <Street2></Street2>\r\n       <City></City>\r\n       <Zip></Zip>\r\n       <State></State>\r\n       <Country>KR</Country>\r\n   </BillingAddress>\r\n   <RedirectInfo>\r\n       <SuccessURL>https://paypage.apcld.net/MerchantSite/bankResponse</SuccessURL>\r\n       <CancelURL>https://paypage.apcld.net/MerchantSite/bankResponse</CancelURL>\r\n   </RedirectInfo>\r\n   <Wallet>\r\n       <WalletID>INIpayTest_2E7AFF55218C51AF93641B11317F5</WalletID>\r\n   </Wallet>\r\n   <Item>\r\n       <ItemCode>Travel</ItemCode>\r\n   </Item>\r\n</TransactionRequest>\r\n"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "2.1. INICIS - AUTH (cancel)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var dateObj = new Date();",
									"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
									"var day = dateObj.getUTCDate();",
									"var year = (dateObj.getUTCFullYear());",
									"var hours = dateObj.getUTCHours();",
									"var minutes = dateObj.getUTCMinutes();",
									"var seconds = dateObj.getUTCSeconds();",
									"var milliseconds = dateObj.getUTCMilliseconds();",
									"newdate = minutes + '' + seconds;",
									"postman.setEnvironmentVariable('auth_txn_id',newdate);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var jsonObject = xml2Json(responseBody);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
									"tests[\"Provider Name is WireCard\"] = responseBody.has(\"<ProviderName>Wirecard</ProviderName>\");",
									"postman.setEnvironmentVariable('WireCardCancelMTxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/xml"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" standalone=\"yes\"?>\n<TransactionRequest>\n    <Header>\n        <UserID>HIS00001</UserID>\n        <MerchantID>InicisTest</MerchantID>\n        <TransactionType>AuthPayment</TransactionType>\n        <Version>2</Version>\n    </Header>\n    <Transaction>\n        <MerchantTxnID>DZtest00{{auth_txn_id}}</MerchantTxnID>\n        <Currency>KRW</Currency>\n        <Amount>100000</Amount>\n        <ChannelType>07</ChannelType>\n        <Method>CC</Method>\n        <TxnDetails>TxnDetails1</TxnDetails>\n        <RefundReason></RefundReason>\n        <DiscountSaving></DiscountSaving>\n        <CancelReason>Test Cancel</CancelReason>\n    </Transaction>\n    <CardDetails>\n        <CardNumber>4564610000000170</CardNumber>\n        <CardHolder>Jon Smith</CardHolder>\n        <CardExpiryMonth>12</CardExpiryMonth>\n        <CardExpiryYear>2017</CardExpiryYear>\n        <CardType>VISA</CardType>\n        <BIN>444433</BIN>\n    </CardDetails>\n    <Customer>\n        <EmailAddress>satyam@chetu.com</EmailAddress>\n        <IPAddress>127.0.0.1</IPAddress>\n        <TelNo>211111111111111111</TelNo>\n        <SessionID></SessionID>\n    </Customer>\n    <BillingAddress>\n        <CustomerName>ISHIMARU KEIICHI</CustomerName>\n    </BillingAddress>\n    <RedirectInfo>\n        <SuccessURL>https://paypage.apcld.net/MerchantSite/bankResponse</SuccessURL>\n        <CancelURL>https://paypage.apcld.net/MerchantSite/bankResponse</CancelURL>\n    </RedirectInfo>\n    <Wallet>\n        <WalletID>INIpayTest_93832B2DDCCDDA87746D11485E7B9</WalletID>\n    </Wallet>\n    <Item>\n        <ItemCode>Book</ItemCode>\n    </Item>\n</TransactionRequest>"
						},
						"url": {
							"raw": "{{endpoint}}",
							"host": [
								"{{endpoint}}"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "PreProc - SecurePay",
			"description": "",
			"item": [
				{
					"name": "1. OneStepPayment",
					"description": "",
					"item": [
						{
							"name": "1.1 SecurePay - OneStep",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
											"postman.setEnvironmentVariable('auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
											"postman.setEnvironmentVariable('WESTPACCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SecurePayMessage>\n    <MessageInfo>\n        <messageID>8af793f9af34bea0cf40f5fb750f64</messageID>\n        <messageTimestamp>20160523133045000000+660</messageTimestamp>\n        <timeoutValue>60</timeoutValue>\n        <apiVersion>xml-4.2</apiVersion>\n    </MessageInfo>\n    <MerchantInfo>\n        <merchantID>QAT001</merchantID>\n        <password>abc123</password>\n    </MerchantInfo>\n    <RequestType>Payment</RequestType>\n    <Payment>\n        <TxnList count=\"1\">\n            <Txn ID=\"1\">\n                <txnType>0</txnType>\n                <txnSource>23</txnSource>\n                <amount>2000</amount>\n                <recurring>no</recurring>\n                <currency>AUD</currency>\n                <purchaseOrderNo>DZ{{auth_txn_id}}</purchaseOrderNo>\n                <surchargeInfo>\n                    <amount>2000</amount>\n                    <rate>100</rate>\n                    <fee>30</fee>\n                </surchargeInfo>\n                <CreditCardInfo>\n                    <cardNumber>4111111111111111</cardNumber>\n                    <expiryDate>09/18</expiryDate>\n                    <cvv>123</cvv>\n                    <cardHolderName>cristian E</cardHolderName>\n                </CreditCardInfo>\n            </Txn>\n        </TxnList>\n    </Payment>\n</SecurePayMessage>"
								},
								"url": {
									"raw": "https://s1portal.gpcloud.com/sP",
									"protocol": "https",
									"host": [
										"s1portal",
										"gpcloud",
										"com"
									],
									"path": [
										"sP"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "1.2. SecurePay - Refund",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
											"postman.setEnvironmentVariable('WESTPACCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<SecurePayMessage>\n    <MessageInfo>\n        <messageID>8af793f9af34bea0cf40f5fb750f64</messageID>\n        <messageTimestamp>20160523133045000000+660</messageTimestamp>\n        <timeoutValue>60</timeoutValue>\n        <apiVersion>xml-4.2</apiVersion>\n    </MessageInfo>\n    <MerchantInfo>\n        <merchantID>QAT001</merchantID>\n        <password>abc123</password>\n    </MerchantInfo>\n    <RequestType>Payment</RequestType>\n    <Payment>\n        <TxnList count=\"1\">\n            <Txn ID=\"1\">\n                <txnType>4</txnType>\n                <txnSource>23</txnSource>\n                <amount>2000</amount>\n                <currency>AUD</currency>\n                <purchaseOrderNo>DZ{{auth_txn_id}}</purchaseOrderNo>\n                <recurring>no</recurring>\n                <txnID>1</txnID>\n            </Txn>\n        </TxnList>\n    </Payment>\n</SecurePayMessage>"
								},
								"url": {
									"raw": "https://s1portal.gpcloud.com/sP",
									"protocol": "https",
									"host": [
										"s1portal",
										"gpcloud",
										"com"
									],
									"path": [
										"sP"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "2. AuthPayment",
					"description": "",
					"item": [
						{
							"name": "2.1. SecurePay - AUTH",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var dateObj = new Date();",
											"var month = dateObj.getUTCMonth() + 1; //months from 1-12",
											"var day = dateObj.getUTCDate();",
											"var year = (dateObj.getUTCFullYear());",
											"var hours = dateObj.getUTCHours();",
											"var minutes = dateObj.getUTCMinutes();",
											"var seconds = dateObj.getUTCSeconds();",
											"var milliseconds = dateObj.getUTCMilliseconds();",
											"newdate = year + '' + month  + '' + day + '' + hours + '' + minutes + '' + seconds;",
											"postman.setEnvironmentVariable('auth_txn_id',newdate);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"postman.setEnvironmentVariable('PreProcSecurepaypreauthID',jsonObject.SecurePayMessage.Payment.TxnList.Txn.preauthID);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SecurePayMessage>\n    <MessageInfo>\n        <messageID>8af793f9af34bea0cf40f5fb750f64</messageID>\n        <messageTimestamp>20162201115745000000+660</messageTimestamp>\n        <timeoutValue>60</timeoutValue>\n        <apiVersion>xml-4.2</apiVersion>\n    </MessageInfo>\n    <MerchantInfo>\n        <merchantID>QAT001</merchantID>\n        <password>abc123</password>\n    </MerchantInfo>\n    <RequestType>Payment</RequestType>\n    <Payment>\n        <TxnList count=\"1\">\n            <Txn ID=\"1\">\n                <txnType>10</txnType>\n                <txnSource>23</txnSource>\n                <amount>2000</amount>\n                <currency>AUD</currency>\n                <purchaseOrderNo>{{auth_txn_id}}</purchaseOrderNo>\n                <CreditCardInfo>\n                    <cardNumber>5555555555554444</cardNumber>\n                    <expiryDate>09/18</expiryDate>\n                    <cvv>123</cvv>\n                    <cardHolderName>cristian E</cardHolderName>\n                </CreditCardInfo>\n                <BuyerInfo>\n                    <ip>123.234.123.1</ip>\n                </BuyerInfo>\n            </Txn>\n        </TxnList>\n    </Payment>\n</SecurePayMessage>"
								},
								"url": {
									"raw": "https://s1portal.gpcloud.com/sP",
									"protocol": "https",
									"host": [
										"s1portal",
										"gpcloud",
										"com"
									],
									"path": [
										"sP"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "2.2 SecurePay - Capture",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<SecurePayMessage>\r\n    <MessageInfo>\r\n        <messageID>8af793f9af34bea0cf40f5fb750f64</messageID>\r\n        <messageTimestamp>20162201115745000000+660</messageTimestamp>\r\n        <timeoutValue>60</timeoutValue>\r\n        <apiVersion>xml-4.2</apiVersion>\r\n    </MessageInfo>\r\n    <MerchantInfo>\r\n        <merchantID>QAT001</merchantID>\r\n        <password>abc123</password>\r\n    </MerchantInfo>\r\n    <RequestType>Payment</RequestType>\r\n    <Payment>\r\n        <TxnList count=\"1\">\r\n            <Txn ID=\"1\">\r\n                <txnType>11</txnType>\r\n                <txnSource>23</txnSource>\r\n                <amount>2000</amount>\r\n                <currency>AUD</currency>\r\n                <purchaseOrderNo>{{auth_txn_id}}</purchaseOrderNo>\r\n                <preauthID>{{PreProcSecurepaypreauthID}}</preauthID>\r\n            </Txn>\r\n        </TxnList>\r\n    </Payment>\r\n</SecurePayMessage> "
								},
								"url": {
									"raw": "https://s1portal.gpcloud.com/sP",
									"protocol": "https",
									"host": [
										"s1portal",
										"gpcloud",
										"com"
									],
									"path": [
										"sP"
									]
								},
								"description": ""
							},
							"response": []
						},
						{
							"name": "2.3 SecurePay - Refund",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var jsonObject = xml2Json(responseBody);",
											"",
											"tests[\"Status code is 200\"] = responseCode.code === 200;",
											"tests[\"APC Response code is 1000\"] = jsonObject.TransactionResponse.Result.ResponseCode === \"1000\";",
											"tests[\"Provider Name is Westpac\"] = responseBody.has(\"<ProviderName>westpac</ProviderName>\");",
											"postman.setEnvironmentVariable('WESTPACCaptureMTtxnID',jsonObject.TransactionResponse.Result.MerchantTxnID);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/xml"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SecurePayMessage>\n    <MessageInfo>\n        <messageID>8af793f9af34bea0cf40f5fb750f64</messageID>\n        <messageTimestamp>20162201115745000000+660</messageTimestamp>\n        <timeoutValue>60</timeoutValue>\n        <apiVersion>xml-4.2</apiVersion>\n    </MessageInfo>\n    <MerchantInfo>\n        <merchantID>QAT001</merchantID>\n        <password>abc123</password>\n    </MerchantInfo>\n    <RequestType>Payment</RequestType>\n    <Payment>\n        <TxnList count=\"1\">\n            <Txn ID=\"1\">\n                <txnType>4</txnType>\n                <txnSource>23</txnSource>\n                <amount>2000</amount>\n                <currency>AUD</currency>\n                <purchaseOrderNo>{{auth_txn_id}}</purchaseOrderNo>\n                <recurring>no</recurring>\n                <txnID>1</txnID>\n            </Txn>\n        </TxnList>\n    </Payment>\n</SecurePayMessage>"
								},
								"url": {
									"raw": "https://s1portal.gpcloud.com/sP",
									"protocol": "https",
									"host": [
										"s1portal",
										"gpcloud",
										"com"
									],
									"path": [
										"sP"
									]
								},
								"description": ""
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}